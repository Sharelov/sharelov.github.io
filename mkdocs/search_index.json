{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nDocumentation for \napp.sharelov.com\n App.\n\n\nSections\n\n\n\n\nGetting Started\n\n\nGeneral Information\n\n\nImportant Note\n\n\nRequirements and Installation\n\n\nTerminology and Domain Logic\n\n\nFiles Structure\n\n\nCoding Style and Conventions\n\n\nLegal Info\n\n\n\n\n\n\nLaravel\n\n\nIntroduction\n\n\nRoutes and Controllers\n\n\nModels\n\n\nConfiguration Files\n\n\nService Providers\n\n\nEvents\n\n\nValidation\n\n\nViews\n\n\n\n\n\n\nSharelov\n\n\nIntroduction\n\n\nFiles Structure\n\n\nEnvironment\n\n\nContent Types\n\n\nUser Types\n\n\nRepositories\n\n\nFlat Repositories\n\n\nAccess Control\n\n\nPackages\n\n\nPackages List\n\n\n\n\n\n\nTraits\n\n\nTraits List\n\n\n\n\n\n\n\n\n\n\nCSS/SASS\n\n\nJavascript\n\n\nProgressive Enhancement", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "Documentation for  app.sharelov.com  App.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#sections", 
            "text": "Getting Started  General Information  Important Note  Requirements and Installation  Terminology and Domain Logic  Files Structure  Coding Style and Conventions  Legal Info    Laravel  Introduction  Routes and Controllers  Models  Configuration Files  Service Providers  Events  Validation  Views    Sharelov  Introduction  Files Structure  Environment  Content Types  User Types  Repositories  Flat Repositories  Access Control  Packages  Packages List    Traits  Traits List      CSS/SASS  Javascript  Progressive Enhancement", 
            "title": "Sections"
        }, 
        {
            "location": "/getting-started/general-info/", 
            "text": "General Information\n\n\nGeneral Information about \nSharelov\n\n\nWhat is Sharelov\n\n\nSharelov is a collaboration platform for social media teams. Sharelov helps teams produce better social media campaigns.\n\n\nMission\n\n\nEmpower social media teams to produce campaigns consumers love.\n\n\nUse\n\n\nRefer to the website \nFAQ", 
            "title": "General Information"
        }, 
        {
            "location": "/getting-started/general-info/#general-information", 
            "text": "General Information about  Sharelov", 
            "title": "General Information"
        }, 
        {
            "location": "/getting-started/general-info/#what-is-sharelov", 
            "text": "Sharelov is a collaboration platform for social media teams. Sharelov helps teams produce better social media campaigns.", 
            "title": "What is Sharelov"
        }, 
        {
            "location": "/getting-started/general-info/#mission", 
            "text": "Empower social media teams to produce campaigns consumers love.", 
            "title": "Mission"
        }, 
        {
            "location": "/getting-started/general-info/#use", 
            "text": "Refer to the website  FAQ", 
            "title": "Use"
        }, 
        {
            "location": "/getting-started/note/", 
            "text": "Important Note\n\n\nYou may notice some inconsistencies in the codebase.\n\n\nLanguage\n\n\nAt first, Sharelov was written in Spanish. Then, the code was translated it to English but there is still core functionality that hasn't yet been changed. Important pieces are: the primary path where Shavelov lives (Libreria) and the database tables (Archivos). The absence of automatic tests makes it more difficult to translate random pieces of code. A strategy to translate more delicate components is being considered. In the meantime, if you encounter any functionality in Spanish and feel comfortable with the language consider the following:\n\n\n\n\nIf local scoped variables are found, a search and replace can be used:\n\n\n\n\nbefore:\n\n\npublic function destroy($id)\n{\n    // set response defaults\n    $tipo_response = 'error';\n    $mensaje = $this-\nerror_default;\n    $json_ar = [];\n\n    // more functionality\n}\n\n\n\n\nafter:\n\n\npublic function destroy($id)\n{\n    // set response defaults\n    $response_type = 'error';\n    $message = $this-\nerror_default;\n    $json_ar = [];\n\n    // more functionality\n}\n\n\n\n\n\n\nIf function names and methods are found, depending on its visibility consider:\n\n\nIf it's a private private method a search and replace can be used within the class.\n\n\nIf it's either public or protected a deprecation can be used:\n\n\n\n\n\n\n\n\nbefore:\n\n\n/**\n * Gets file from the FileSystem\n *\n * @param string $path\n * @param string $disk\n * @return string\n */\npublic function getArchivo($path, $disk = '')\n{\n    // filesystem\n    $disk = $disk ? $disk : $this-\nfilesystem_uploads;\n\n    //\n    $img = Storage::disk($disk)-\nget($path);\n\n    // image string\n    return $img;\n}\n\n\n\n\nafter:\n\n\n/**\n * Gets file from the FileSystem\n *\n * @param string $path\n * @param string $disk\n * @return string\n */\npublic function getFile($path, $disk = '')\n{\n    // filesystem\n    $disk = $disk ? $disk : $this-\nfilesystem_uploads;\n\n    //\n    $img = Storage::disk($disk)-\nget($path);\n\n    // image string\n    return $img;\n}\n\n/**\n * @deprecated 0.46.5\n * @see getFile()\n */\npublic function getArchivo($path, $disk = '')\n{\n    return $this-\ngetFile($path, $disk);\n}\n\n\n\n\nNew Code\n\n\nDocumentation for the project started in version 0.46.0. Since then we started a refactoring effort to make all code similar to the documentation but there's still a considerable amount left.\nWhenever there's a discrepancy, New Code must adhere to the documentation and not to the existing code.", 
            "title": "Important Note"
        }, 
        {
            "location": "/getting-started/note/#important-note", 
            "text": "You may notice some inconsistencies in the codebase.", 
            "title": "Important Note"
        }, 
        {
            "location": "/getting-started/note/#language", 
            "text": "At first, Sharelov was written in Spanish. Then, the code was translated it to English but there is still core functionality that hasn't yet been changed. Important pieces are: the primary path where Shavelov lives (Libreria) and the database tables (Archivos). The absence of automatic tests makes it more difficult to translate random pieces of code. A strategy to translate more delicate components is being considered. In the meantime, if you encounter any functionality in Spanish and feel comfortable with the language consider the following:   If local scoped variables are found, a search and replace can be used:   before:  public function destroy($id)\n{\n    // set response defaults\n    $tipo_response = 'error';\n    $mensaje = $this- error_default;\n    $json_ar = [];\n\n    // more functionality\n}  after:  public function destroy($id)\n{\n    // set response defaults\n    $response_type = 'error';\n    $message = $this- error_default;\n    $json_ar = [];\n\n    // more functionality\n}   If function names and methods are found, depending on its visibility consider:  If it's a private private method a search and replace can be used within the class.  If it's either public or protected a deprecation can be used:     before:  /**\n * Gets file from the FileSystem\n *\n * @param string $path\n * @param string $disk\n * @return string\n */\npublic function getArchivo($path, $disk = '')\n{\n    // filesystem\n    $disk = $disk ? $disk : $this- filesystem_uploads;\n\n    //\n    $img = Storage::disk($disk)- get($path);\n\n    // image string\n    return $img;\n}  after:  /**\n * Gets file from the FileSystem\n *\n * @param string $path\n * @param string $disk\n * @return string\n */\npublic function getFile($path, $disk = '')\n{\n    // filesystem\n    $disk = $disk ? $disk : $this- filesystem_uploads;\n\n    //\n    $img = Storage::disk($disk)- get($path);\n\n    // image string\n    return $img;\n}\n\n/**\n * @deprecated 0.46.5\n * @see getFile()\n */\npublic function getArchivo($path, $disk = '')\n{\n    return $this- getFile($path, $disk);\n}", 
            "title": "Language"
        }, 
        {
            "location": "/getting-started/note/#new-code", 
            "text": "Documentation for the project started in version 0.46.0. Since then we started a refactoring effort to make all code similar to the documentation but there's still a considerable amount left.\nWhenever there's a discrepancy, New Code must adhere to the documentation and not to the existing code.", 
            "title": "New Code"
        }, 
        {
            "location": "/getting-started/installation/", 
            "text": "Requirements and Installation\n\n\nList of requirements needed to install a local copy of Sharelov on your  development environment.\n\n\nGit\n\n\nSharelov lives in a private \nBitbucket\n repository. You need to be included in the Chat Agency Bitbucket group in order to access the repository.\n\n\nSharelov uses \nGit Flow\n as a branching model. Although is possible to use \nGit Flow\n using the Terminal/Command prompt (\nHere's a cheat sheat\n), most of us prefer to use \nSourcetree\n, a GUI for \nGit\n. Here's how to implement \nGit Flow with Sourcetree\n.\n\n\nServer Requirements\n\n\nSharelov's requirements are the same as Laravel 5.2 requirements. We run PHP 7.0 on our production server so can use 7.0 syntax without a problem. Also, Sharelov uses MySQL 5.6 in production for a database.\n\n\nOther requirements:\n\n\n\n\nComposer\n\n\nNode and NPM\n\n\nGulp\n\n\n\n\n\n\nBower\n\n\n\n\nAlso, you can skip the difficulty of configuring all that and use \nLaravel Homestead\n box instead.\n\n\nInstallation\n\n\nOnce an admin has granted you permissions you must do the following:\n\n\n\n\nClone the repository:\n\n\n\n\ngit clone git@bitbucket.org:chatagency/sharelov.git\n\n\n\n\n\n\n\n\nAn admin should provide you with a \nlocal\n copy of the \nenvironment\n file. Then, \n.env\n file must be included in Sharelov's root folder.\n\n\n\n\n\n\nCreate a local database and edit the following lines on the \n.env\n file:\n\n\n\n\n\n\nDB_HOST=localhost\nDB_DATABASE=database\nDB_USERNAME=username\nDB_PASSWORD=password\n\n\n\n\n\n\nChange/add other \nenvironment\n configuration as needed\n\n\n\n\n\n\nComposer Update\n\n\nNever use the generic \ncomposer update\n, only \ncomposer install\n. If a single dependency needs to be updated use: \ncomposer update repository/dependency\n so they can be fully tested one at a time. \nRead about why\n.\n\n\n\n\n\n\nOpen the terminal/command prompt and run the following commands in Sharelov's root:\n\n\ncomposer install\n,\n\n\nnpm install\n,\n\n\nbower install\n,\n\n\ngulp\n,\n\n\nphp artisan migrate\n, and finally\n\n\nphp artisan vendor:publish", 
            "title": "Requirements and Installation"
        }, 
        {
            "location": "/getting-started/installation/#requirements-and-installation", 
            "text": "List of requirements needed to install a local copy of Sharelov on your  development environment.", 
            "title": "Requirements and Installation"
        }, 
        {
            "location": "/getting-started/installation/#git", 
            "text": "Sharelov lives in a private  Bitbucket  repository. You need to be included in the Chat Agency Bitbucket group in order to access the repository.  Sharelov uses  Git Flow  as a branching model. Although is possible to use  Git Flow  using the Terminal/Command prompt ( Here's a cheat sheat ), most of us prefer to use  Sourcetree , a GUI for  Git . Here's how to implement  Git Flow with Sourcetree .", 
            "title": "Git"
        }, 
        {
            "location": "/getting-started/installation/#server-requirements", 
            "text": "Sharelov's requirements are the same as Laravel 5.2 requirements. We run PHP 7.0 on our production server so can use 7.0 syntax without a problem. Also, Sharelov uses MySQL 5.6 in production for a database.  Other requirements:   Composer  Node and NPM  Gulp    Bower   Also, you can skip the difficulty of configuring all that and use  Laravel Homestead  box instead.", 
            "title": "Server Requirements"
        }, 
        {
            "location": "/getting-started/installation/#installation", 
            "text": "Once an admin has granted you permissions you must do the following:   Clone the repository:   git clone git@bitbucket.org:chatagency/sharelov.git    An admin should provide you with a  local  copy of the  environment  file. Then,  .env  file must be included in Sharelov's root folder.    Create a local database and edit the following lines on the  .env  file:    DB_HOST=localhost\nDB_DATABASE=database\nDB_USERNAME=username\nDB_PASSWORD=password   Change/add other  environment  configuration as needed    Composer Update  Never use the generic  composer update , only  composer install . If a single dependency needs to be updated use:  composer update repository/dependency  so they can be fully tested one at a time.  Read about why .    Open the terminal/command prompt and run the following commands in Sharelov's root:  composer install ,  npm install ,  bower install ,  gulp ,  php artisan migrate , and finally  php artisan vendor:publish", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/domain/", 
            "text": "Terminology and Domain Logic\n\n\nOur \ndomain\n is divided in six main components:\n\n\n\n\nBrand\n\n\nCampaign\n\n\nPublication\n\n\nSubscription\n\n\nUser\n\n\nMembership (Teammates)\n\n\n\n\nAnd some secondary ones:\n\n\n\n\nSocial Accounts\n\n\nPermissions\n\n\nAuthorizations\n\n\nTags\n\n\nFiles\n\n\nServices (external API)\n\n\n\n\nIs important to follow this terminology throughout the the project in order to maintain consistency. If new terminology is needed, it should be discussed collectively first.\n\n\nBrand\n\n\nModel\n: Brand\n\n\nA \nBrand\n is a group that contains multiple \nCampaigns\n and it belongs to a \nSubscription\n.  There are also other components that can be associated to a \nBrand\n:\n\n\n\n\nTeammates (Memberships)\n: The authorized users can authorize other teammates to work on a \nBrand\n.\n\n\nSocial Accounts\n: Social Media Accounts need to be assigned to the \nBrand\n so they can be available in that \nBrand\n's \nCampaigns\n.\n\n\nTags\n: These are categories used to group Publications. \nBrand tags\n are available to all \nPublications\n in that \nBrand\n.\n\n\nFiles\n: images.\n\n\n\n\nCampaigns\n\n\nModel\n: Campaign\n\n\nA \nCampaign\n is a collection of \nPublications\n (posts, tweets, etc.) and it belongs to a \nBrand\n. There are other components that can be associated to a \nCampaign\n:\n\n\n\n\nSocial Accounts\n: Depending on the type, a \nCampaign\n can have one (1) Social Media Account associated to it.\n\n\nClient Memberships\n: Clients cannot see a \nCampaign\n unless they are included as a \nteammate\n (or \nauthorized\n [\n\ud83d\udcc4\n]) to it.\n\n\nTags\n: They are the same as \nBrand tags\n, but only available to the \nPublications\n of the \nCampaign\n they are associated to.\n\n\n\n\nPublications\n\n\nBase Model\n: Publication\n\n\nSpecific Models\n: Publications/*\n\n\nA \nPublication\n belongs to a \nCampaign\n and is eventually sent to a \nSocial Account\n (or \npublished\n).\n\n\nA \nPublication\n may have multiple components associated to it:\n\n\n\n\nFiles\n: images, videos, etc.\n\n\nPlaceholders\n: A Placeholder is a special type o image created dynamically with the text that user specifies.\n\n\nTag\n: A \nPublication\n can belong to only one, either \nBrand\n or \nCampaign\n, \nTag group\n.\n\n\nSpecific Components\n: Depending of the \nPublication\n, some other components can be associated also.\n\n\n\n\nUser\n\n\nModel\n: User\n\n\nThe \nUser\n is the container for the user information (email, name, last name, etc.). Since Sharelov is a subscription based app, the user could potentially belong to different \nSubscriptions\n, so, in order not to repeat the user information, we use the \npivot\n \nMembership\n.\n\n\nSubscription\n\n\nModel\n: Subscription\n\n\nA \nSubscription\n is the primary container where all other components live.\n\n\nA \nSubscription\n is basically a Sharelov account. The only way to create a \nSubscription\n is to fill up \nSharelov's sign up form\n.\n\n\nThere can only be one \nowner\n \nMembership\n and one \nUser\n per \nSubscription\n.\n\n\nMembership\n\n\nModel\n: Membership\n\n\nA \nMembership\n is the association (pivot) between the \nSubscription\n and the \nUser\n.\n\n\nThe \nUser\n can have multiple \nMemberships\n, and each \nMembership\n belongs to only one \nSubscription\n.\n\n\nA \nBrand\n \nTeam\n consists of a collection of \nMemberships\n assigned to that \nBrand\n.\n\n\nChart", 
            "title": "Terminology and Domain Logic"
        }, 
        {
            "location": "/getting-started/domain/#terminology-and-domain-logic", 
            "text": "Our  domain  is divided in six main components:   Brand  Campaign  Publication  Subscription  User  Membership (Teammates)   And some secondary ones:   Social Accounts  Permissions  Authorizations  Tags  Files  Services (external API)   Is important to follow this terminology throughout the the project in order to maintain consistency. If new terminology is needed, it should be discussed collectively first.", 
            "title": "Terminology and Domain Logic"
        }, 
        {
            "location": "/getting-started/domain/#brand", 
            "text": "Model : Brand  A  Brand  is a group that contains multiple  Campaigns  and it belongs to a  Subscription .  There are also other components that can be associated to a  Brand :   Teammates (Memberships) : The authorized users can authorize other teammates to work on a  Brand .  Social Accounts : Social Media Accounts need to be assigned to the  Brand  so they can be available in that  Brand 's  Campaigns .  Tags : These are categories used to group Publications.  Brand tags  are available to all  Publications  in that  Brand .  Files : images.", 
            "title": "Brand"
        }, 
        {
            "location": "/getting-started/domain/#campaigns", 
            "text": "Model : Campaign  A  Campaign  is a collection of  Publications  (posts, tweets, etc.) and it belongs to a  Brand . There are other components that can be associated to a  Campaign :   Social Accounts : Depending on the type, a  Campaign  can have one (1) Social Media Account associated to it.  Client Memberships : Clients cannot see a  Campaign  unless they are included as a  teammate  (or  authorized  [ \ud83d\udcc4 ]) to it.  Tags : They are the same as  Brand tags , but only available to the  Publications  of the  Campaign  they are associated to.", 
            "title": "Campaigns"
        }, 
        {
            "location": "/getting-started/domain/#publications", 
            "text": "Base Model : Publication  Specific Models : Publications/*  A  Publication  belongs to a  Campaign  and is eventually sent to a  Social Account  (or  published ).  A  Publication  may have multiple components associated to it:   Files : images, videos, etc.  Placeholders : A Placeholder is a special type o image created dynamically with the text that user specifies.  Tag : A  Publication  can belong to only one, either  Brand  or  Campaign ,  Tag group .  Specific Components : Depending of the  Publication , some other components can be associated also.", 
            "title": "Publications"
        }, 
        {
            "location": "/getting-started/domain/#user", 
            "text": "Model : User  The  User  is the container for the user information (email, name, last name, etc.). Since Sharelov is a subscription based app, the user could potentially belong to different  Subscriptions , so, in order not to repeat the user information, we use the  pivot   Membership .", 
            "title": "User"
        }, 
        {
            "location": "/getting-started/domain/#subscription", 
            "text": "Model : Subscription  A  Subscription  is the primary container where all other components live.  A  Subscription  is basically a Sharelov account. The only way to create a  Subscription  is to fill up  Sharelov's sign up form .  There can only be one  owner   Membership  and one  User  per  Subscription .", 
            "title": "Subscription"
        }, 
        {
            "location": "/getting-started/domain/#membership", 
            "text": "Model : Membership  A  Membership  is the association (pivot) between the  Subscription  and the  User .  The  User  can have multiple  Memberships , and each  Membership  belongs to only one  Subscription .  A  Brand   Team  consists of a collection of  Memberships  assigned to that  Brand .", 
            "title": "Membership"
        }, 
        {
            "location": "/getting-started/domain/#chart", 
            "text": "", 
            "title": "Chart"
        }, 
        {
            "location": "/getting-started/structure/", 
            "text": "App File Structure\n\n\nSharelov is structured like an usual Laravel application. The main folders are:\n\n\n\n\napp\n\n\nConsole\n\n\nEvents\n\n\nHttp\n\n\nControllers\n\n\nMiddlewares\n\n\nRequests\n\n\nRoutes\n\n\n\n\n\n\nLibreria\n (where Sharelov mostly lives)\n\n\nListeners\n\n\nModels\n\n\nProviders\n\n\n\n\n\n\nconfig\n\n\nhtml (instead of \"public\")\n\n\nresources\n\n\nstorage\n\n\ntests (not used... for now!!!)\n\n\n\n\nThere are also files and folders explained in the \nLaravel section", 
            "title": "Files Structure"
        }, 
        {
            "location": "/getting-started/structure/#app-file-structure", 
            "text": "Sharelov is structured like an usual Laravel application. The main folders are:   app  Console  Events  Http  Controllers  Middlewares  Requests  Routes    Libreria  (where Sharelov mostly lives)  Listeners  Models  Providers    config  html (instead of \"public\")  resources  storage  tests (not used... for now!!!)   There are also files and folders explained in the  Laravel section", 
            "title": "App File Structure"
        }, 
        {
            "location": "/getting-started/coding-style/", 
            "text": "Coding Style and Conventions\n\n\n\n\nInfo\n\n\nWe will eventually add \nPSR-1\n and \nPSR-2\n automatization\n\n\n\n\n\n\nNote\n\n\nSome refactoring need\n\n\n\n\nBecause we use Lavavel as our main framework, it's important to follow the same conventions in order to maintain consistency.  \n\n\nPSR-1\n\n\nPSR-1\n is a PHP \"Basic Coding Standard\". It defines how the basic structures (\nif\n, \nelse\n, \nfunctions\n, etc.) and statements (\nincludes\n, \nnamespaces\n, etc.) should be styled.\n\n\nIn addition to \nPSR-1\n, it's important to follow a consistent set of styled rules when the specs tend give us two or more options.\n\n\nThe following must be enforced:\n\n\n\n\n\n\nWe must only use the tag \n?php\n. Since we mostly use classes and templates (with template tags) the tag \n?=\n is not needed.\n\n\n\n\n\n\nPSR-1 avoids discussing about variables and properties. For consistency's sake we use the \nLaravel way\n which is the underscore way: \n$under_score\n\n\n\n\n\n\nArrays should use the \"[]\" syntax. The trailing comma should not be an issue:\n\n\n\n\n\n\n$sampleArray1 = ['firstValue','secondValue'];\n$sampleArray2 = [\n    'firstKey'  =\n 'firstValue',\n    'secondKey' =\n 'secondValue',\n];\n\n\n\n\nPSR-2\n\n\nSince Version 5.1 \nLaravel started\n using \nPSR-2\n as a coding style. As described by PHP-FIG group:\n\n\n\n\n\"This guide extends and expands on PSR-1, the basic coding standard\".\n\n\n\n\nPSR-2\n discusses the styling of classes, indenting, linewidth, keywords (\ntrue\n, \nfalse\n, etc.) and more.\n\n\nFolders and File Names\n\n\nThe php filenames (\n.php\n) fall into four main types: class files, view file, config files and helpers.\n\n\n\n\n\n\nClass Files must be in studly case (\nMailInterface.php\n), the same as the name of the class.\n\n\n\n\n\n\nView Files\n, or blade files, must be lowercase and use underscore (\ntemplate_name.blade.php\n) when more than one word is used.\n\n\n\n\n\n\nConfig files\n names must be lowercase and use underscore (\nconfig_files.php\n) when more than one word is used.\n\n\n\n\n\n\nHelper files\n names must be lowercase and use underscore (\nnice_helper.php\n) when more than one word is used.\n\n\n\n\n\n\nOther filenames (\n.js\n, \n.sass\n, etc.) are discussed in their respective sections.\n\n\nDocumentation\n\n\n\n\nNote:\n\n\nSome refactoring need\n\n\n\n\nWe use inline and block documentation to make our code easier to understand.\n\n\n\n\n\n\nInline comments are always encouraged, especially for obscure logic.\n\n\n\n\n\n\nAll classes, methods and properties should have block comments or \nDocBlocks\n.\n\n\n\n\n\n\nReadability\n\n\n\n\nNote\n\n\n\n\nSome refactoring need\n\n\nDepends on context\n\n\n\n\n\n\nWe value readability and simple conventions. Simplicity does not mean, by all means, easy. Even though this is a more abstract concept, these are some of the rules we always need to consider:\n\n\n\n\nUse the \nDomain vocabulary\n.\n\n\nDon't use Abbreviations:\n Variables, properties, methods, etc. must not be abbreviated, even if they are used internally in a class or file. Some examples:\n\n\n$publication\n instead of \n$p\n\n\nprotected $brand;\n instead of \nprotected $b;\n\n\n\n\n\n\nNamed Descriptively\n: Every property, primitive, structure, etc. created must describe its intent, even if they are used internally in a class or file. Some examples:\n\n\n$publication_id\n instead of \n$id\n\n\nfunction getUserLevel(){}\n instead of \nfunction level(){}\n\n\n\n\n\n\nUse the available structures when possible\n: Make sure the functionality you need is not available before re-inventing the wheel.\n\n\nAvoid one line complicated logic\n: Complicated one line expressions are difficult to debug. Try breaking up the logic in different pieces when possible.\n\n\nKeep code lines short\n: Ideally, a code line length \nshould be no longer than 80 characters\n and have a soft limit of 120 characters, Although this is not always possible we must try to break down complex logic whenever it gets complicated. Here are some examples:\n\n\n\n\n// Split long assigments onto several lines\n$this_is-\na_very-\nvery-\nlong-\nstatement\n    = $this-\najax-\ngetJavascript(t3lib_extMgm::siteRelPath('nr_xajax'));\n\n$some_other_thing = true;\n\n\n\n\n// Passing params while calling a function\n$this-\nsomeOtherFunc(\n    $this-\nsomeEvenOtherFunc(\n        'Help me!',\n        // inline if there are not too manny values\n        ['foo'  =\n 'bar','spam' =\n 'eggs',],\n        23\n    ),\n    $this-\nsomeEvenOtherFunc()\n);\n\n\n\n\n// Passing params while calling a function\n$this-\nsomeOtherFunc(\n    $this-\nsomeEvenOtherFunc(\n        'Help me!',\n        // indent if there are many values\n        [\n            'foo'  =\n 'bar',\n            'spam' =\n 'eggs',\n            'yo' =\n 'mate',\n            'ying' =\n 'yang',\n            'nice' =\n 'catch',\n            'keep' =\n 'it',\n            'simple' =\n 'stupid',\n        ],\n        23\n    ),\n    $this-\nsomeEvenOtherFunc()\n);\n\n\n\n\n// When using fluent programming\n$someObject-\nsomeFunction(\nsome\n, \nparameter\n)\n    -\nsomeOtherFunc(23, 42)\n    -\nandAThirdFunction();\n\n$some_other_thing = true;\n\n\n\n\n// When using the  ternary operator\n$a = $condition1 \n $condition2\n    ? $foo : $bar;\n\n$b = $condition3 \n $condition4\n    ? $foo_man_this_is_too_long_what_should_i_do\n    : $bar;\n\n\n\n\nOther Style Considerations\n\n\n\n\nReturn early:\n Whenever an if - else is needed consider the following:\n\n\n\n\n// Instead of this\nfunction foo($bar, $baz)\n{\n    if ($foo) {\n        //assume\n        //that\n        //here\n        //is\n        //the\n        //whole\n        //logic\n        //of\n        //this\n        //method\n        return $calculated_value;\n    } else {\n        return null;\n    }\n}\n\n// Use this\nfunction foo($bar, $baz)\n{\n    if (!$foo) {\n        return null;\n    }\n\n    //assume\n    //that\n    //here\n    //is\n    //the\n    //whole\n    //logic\n    //of\n    //this\n    //method\n    return $calculated_value;\n}\n\n\n\n\n\n\nChoose carefully your function empty/false value returns\n: Sometimes is difficult when choosing \nfalse\n, \nnull\n or an empty string \n\"\"\n as an empty value. As a general rule, it's best to look at the \nnot empty\n value for clues. If it\u2019s a boolean then a \nfalse\n should be used. If it's a \nstring\n, an \nobject\n or an \narray\n, then a \nnull\n is preferred.\n\n\nTest for different states\n: Component usually have \ndifferent states\n. Even though we design the component for the optimal state, don't neglect the rest of them. Some examples:\n\n\nTest parameters in case wrong ones are given to the component.\n\n\nTest parameters in case empty ones are given to the component.\n\n\nTest the output's size of the component.", 
            "title": "Coding Style"
        }, 
        {
            "location": "/getting-started/coding-style/#coding-style-and-conventions", 
            "text": "Info  We will eventually add  PSR-1  and  PSR-2  automatization    Note  Some refactoring need   Because we use Lavavel as our main framework, it's important to follow the same conventions in order to maintain consistency.", 
            "title": "Coding Style and Conventions"
        }, 
        {
            "location": "/getting-started/coding-style/#psr-1", 
            "text": "PSR-1  is a PHP \"Basic Coding Standard\". It defines how the basic structures ( if ,  else ,  functions , etc.) and statements ( includes ,  namespaces , etc.) should be styled.  In addition to  PSR-1 , it's important to follow a consistent set of styled rules when the specs tend give us two or more options.  The following must be enforced:    We must only use the tag  ?php . Since we mostly use classes and templates (with template tags) the tag  ?=  is not needed.    PSR-1 avoids discussing about variables and properties. For consistency's sake we use the  Laravel way  which is the underscore way:  $under_score    Arrays should use the \"[]\" syntax. The trailing comma should not be an issue:    $sampleArray1 = ['firstValue','secondValue'];\n$sampleArray2 = [\n    'firstKey'  =  'firstValue',\n    'secondKey' =  'secondValue',\n];", 
            "title": "PSR-1"
        }, 
        {
            "location": "/getting-started/coding-style/#psr-2", 
            "text": "Since Version 5.1  Laravel started  using  PSR-2  as a coding style. As described by PHP-FIG group:   \"This guide extends and expands on PSR-1, the basic coding standard\".   PSR-2  discusses the styling of classes, indenting, linewidth, keywords ( true ,  false , etc.) and more.", 
            "title": "PSR-2"
        }, 
        {
            "location": "/getting-started/coding-style/#folders-and-file-names", 
            "text": "The php filenames ( .php ) fall into four main types: class files, view file, config files and helpers.    Class Files must be in studly case ( MailInterface.php ), the same as the name of the class.    View Files , or blade files, must be lowercase and use underscore ( template_name.blade.php ) when more than one word is used.    Config files  names must be lowercase and use underscore ( config_files.php ) when more than one word is used.    Helper files  names must be lowercase and use underscore ( nice_helper.php ) when more than one word is used.    Other filenames ( .js ,  .sass , etc.) are discussed in their respective sections.", 
            "title": "Folders and File Names"
        }, 
        {
            "location": "/getting-started/coding-style/#documentation", 
            "text": "Note:  Some refactoring need   We use inline and block documentation to make our code easier to understand.    Inline comments are always encouraged, especially for obscure logic.    All classes, methods and properties should have block comments or  DocBlocks .", 
            "title": "Documentation"
        }, 
        {
            "location": "/getting-started/coding-style/#readability", 
            "text": "Note   Some refactoring need  Depends on context    We value readability and simple conventions. Simplicity does not mean, by all means, easy. Even though this is a more abstract concept, these are some of the rules we always need to consider:   Use the  Domain vocabulary .  Don't use Abbreviations:  Variables, properties, methods, etc. must not be abbreviated, even if they are used internally in a class or file. Some examples:  $publication  instead of  $p  protected $brand;  instead of  protected $b;    Named Descriptively : Every property, primitive, structure, etc. created must describe its intent, even if they are used internally in a class or file. Some examples:  $publication_id  instead of  $id  function getUserLevel(){}  instead of  function level(){}    Use the available structures when possible : Make sure the functionality you need is not available before re-inventing the wheel.  Avoid one line complicated logic : Complicated one line expressions are difficult to debug. Try breaking up the logic in different pieces when possible.  Keep code lines short : Ideally, a code line length  should be no longer than 80 characters  and have a soft limit of 120 characters, Although this is not always possible we must try to break down complex logic whenever it gets complicated. Here are some examples:   // Split long assigments onto several lines\n$this_is- a_very- very- long- statement\n    = $this- ajax- getJavascript(t3lib_extMgm::siteRelPath('nr_xajax'));\n\n$some_other_thing = true;  // Passing params while calling a function\n$this- someOtherFunc(\n    $this- someEvenOtherFunc(\n        'Help me!',\n        // inline if there are not too manny values\n        ['foo'  =  'bar','spam' =  'eggs',],\n        23\n    ),\n    $this- someEvenOtherFunc()\n);  // Passing params while calling a function\n$this- someOtherFunc(\n    $this- someEvenOtherFunc(\n        'Help me!',\n        // indent if there are many values\n        [\n            'foo'  =  'bar',\n            'spam' =  'eggs',\n            'yo' =  'mate',\n            'ying' =  'yang',\n            'nice' =  'catch',\n            'keep' =  'it',\n            'simple' =  'stupid',\n        ],\n        23\n    ),\n    $this- someEvenOtherFunc()\n);  // When using fluent programming\n$someObject- someFunction( some ,  parameter )\n    - someOtherFunc(23, 42)\n    - andAThirdFunction();\n\n$some_other_thing = true;  // When using the  ternary operator\n$a = $condition1   $condition2\n    ? $foo : $bar;\n\n$b = $condition3   $condition4\n    ? $foo_man_this_is_too_long_what_should_i_do\n    : $bar;", 
            "title": "Readability"
        }, 
        {
            "location": "/getting-started/coding-style/#other-style-considerations", 
            "text": "Return early:  Whenever an if - else is needed consider the following:   // Instead of this\nfunction foo($bar, $baz)\n{\n    if ($foo) {\n        //assume\n        //that\n        //here\n        //is\n        //the\n        //whole\n        //logic\n        //of\n        //this\n        //method\n        return $calculated_value;\n    } else {\n        return null;\n    }\n}\n\n// Use this\nfunction foo($bar, $baz)\n{\n    if (!$foo) {\n        return null;\n    }\n\n    //assume\n    //that\n    //here\n    //is\n    //the\n    //whole\n    //logic\n    //of\n    //this\n    //method\n    return $calculated_value;\n}   Choose carefully your function empty/false value returns : Sometimes is difficult when choosing  false ,  null  or an empty string  \"\"  as an empty value. As a general rule, it's best to look at the  not empty  value for clues. If it\u2019s a boolean then a  false  should be used. If it's a  string , an  object  or an  array , then a  null  is preferred.  Test for different states : Component usually have  different states . Even though we design the component for the optimal state, don't neglect the rest of them. Some examples:  Test parameters in case wrong ones are given to the component.  Test parameters in case empty ones are given to the component.  Test the output's size of the component.", 
            "title": "Other Style Considerations"
        }, 
        {
            "location": "/getting-started/legal/", 
            "text": "Legal Information\n\n\nUnder construction", 
            "title": "Legal Info"
        }, 
        {
            "location": "/getting-started/legal/#legal-information", 
            "text": "Under construction", 
            "title": "Legal Information"
        }, 
        {
            "location": "/laravel/intro/", 
            "text": "Introduction\n\n\nSharelov is built on top of the \nLaravel Framework\n. Knowledge of the framework is a requirement in order to work on Sharelov.\n\n\nThis section goes over the specific ways \nLaravel\n is used throughout the app.", 
            "title": "Introduction"
        }, 
        {
            "location": "/laravel/intro/#introduction", 
            "text": "Sharelov is built on top of the  Laravel Framework . Knowledge of the framework is a requirement in order to work on Sharelov.  This section goes over the specific ways  Laravel  is used throughout the app.", 
            "title": "Introduction"
        }, 
        {
            "location": "/laravel/routes/", 
            "text": "Routes and Controllers\n\n\nRESTful\n\n\n\n\nNote\n\n\nSome refactoring need\n\n\n\n\nSharelov (with just a few exceptions) uses \nRESTful\n routes and controllers. Routes and controllers use \nRESTful\n conventions:\n\n\n\n\n\n\n\n\nVerb\n\n\nPath\n\n\nAction\n\n\nRoute Name\n\n\n\n\n\n\n\n\n\n\nGET\n\n\n/brand\n\n\nindex\n\n\nbrand.index\n\n\n\n\n\n\nGET\n\n\n/brand/create\n\n\ncreate\n\n\nbrand.create\n\n\n\n\n\n\nPOST\n\n\n/brand\n\n\nstore\n\n\nbrand.store\n\n\n\n\n\n\nGET\n\n\n/brand/{brand_id}\n\n\nshow\n\n\nbrand.show\n\n\n\n\n\n\nGET\n\n\n/brand/{brand_id}/edit\n\n\nedit\n\n\nbrand.edit\n\n\n\n\n\n\nPUT/PATCH\n\n\n/brand/{brand_id}\n\n\nupdate\n\n\nbrand.update\n\n\n\n\n\n\nDELETE\n\n\n/brand/{brand_id}\n\n\ndestroy\n\n\nbrand.destroy\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nPUT/PATCH\n is not currently been used\n\n\n\n\nThis is very important, since it goes in hand with Sharelov's \nPermission\n system (\n\ud83d\udcc4\n) and also helps, in a way, with the \nsubscription\n model.\n\n\nRouting\n\n\n\n\nNote\n\n\n\n\nSome refactoring need\n\n\nLocation may change when Sharelov is updated to Laravel 5.3\n\n\n\n\n\n\nRoutes\n primary files are located in: \nApp\\Http\\\n.\n\n\nRoutes\n are divided by \nWeb\n (routes_web.php), \nWebhooks\n (routes_web_hooks.php) and \nAPI\n (routes_api.php) (currently not used). These files contain, either \nRoutes\n or/and \nincludes\n to other files in the \nRoutes\n folder.\n\n\nRoutes includes\n are grouped, for the most part, by first-class citizen \ndomain components\n, with the exception of functional ones like auth or the ones used for testing.\n\n\nWriting Routes\n\n\nThese are some of the rules that must be enforced when creating/updating \nroutes\n:\n\n\n\n\nFor consistency no closures are used, so all \nroutes\n have a controller associated to it.\n\n\nAll \nroutes\n \nmust have names\n. Names must use the \nRESTful\n convention, example: \nbrands.create\n.\n\n\nFor consistency no \nRoute Model Binding\n is used.\n\n\n\n\nAlso, for the most part, Sharelov uses \nRESTful nested resources\n to organize as a way to organize routes and controllers.\n\n\nHere's an example:\n\n\n// brands.campaigns.index\n// line brakes for readability\n// and documentation\nRoute::get(\n    // url match\n    'brands/{brand_id}/campaigns/',\n    // options array\n    [\n        // route name\n        'as' =\n 'brands.campaigns.index',\n        // controller associated\n        'uses' =\n 'CampaignsController@index'\n    ]\n);\n\n\n\n\nControllers\n\n\nControllers are located in \nApp\\Http\\Controllers\n.\n\n\n\n\nNote\n\n\nSome refactoring need\n\n\n\n\nControllers are, for the most part, by the website sections.\n\n\nControllers in Sharelov follow the following rules:\n\n\n\n\nThe controller's name describe the component or subcomponent and always include the word \nComponent\n at the end, example: \nBrandsController\n, \nBrandsUploadsController\n.\n\n\nDependency injection\n is used using constructor or method injection.\n\n\nSince we are working with \nRESTful\n, \nall public methods must conform to the \nRESTful\n naming convention\n. Each public method must be name the same as a \nRESTful\n action (index, create, store, show, edit, update, destroy) and each controller should not have more than seven public methods.\n\n\nControllers are allowed to have protected (internal) methods that don't follow the \nRESTful\n convention.\n\n\nFor components related to a controller (files, comments, etc.) \na new controller should be created with one or more of the \nRESTful\n methods\n.\n\n\nThe name of the controller should define the type of action, not the methods. For example: \nCampaingImagesController\n, \nCampaingCommentsController\n.\n\n\n\n\nHere's an example of a \nRESTful\n controllers:\n\n\n?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\n/**\n * Display a listing of the resource.\n */\nclass WidgetController extends Controller\n{\n   /**\n    * Display a listing of the resource.\n    *\n    * @return Response\n    */\n   public function index()\n   {\n       //\n   }\n\n   /**\n    * Show the form for creating a new resource.\n    *\n    * @return Response\n    */\n   public function create()\n   {\n       //\n   }\n\n   /**\n    * Store a newly created resource in storage.\n    *\n    * @param  Request  $request\n    * @return Response\n    */\n   public function store(Request $request)\n   {\n       //\n   }\n\n   /**\n    * Display the specified resource.\n    *\n    * @param  int  $id\n    * @return Response\n    */\n   public function show($id)\n   {\n       //\n   }\n\n   /**\n    * Show the form for editing the specified resource.\n    *\n    * @param  int  $id\n    * @return Response\n    */\n   public function edit($id)\n   {\n       //\n   }\n\n   /**\n    * Update the specified resource in storage.\n    *\n    * @param  Request  $request\n    * @param  int  $id\n    * @return Response\n    */\n   public function update($id, Request $request)\n   {\n       //\n   }\n\n   /**\n    * Remove the specified resource from storage.\n    *\n    * @param  int  $id\n    * @return Response\n    */\n   public function destroy($id)\n   {\n       //\n   }\n}", 
            "title": "Routes and Controllers"
        }, 
        {
            "location": "/laravel/routes/#routes-and-controllers", 
            "text": "", 
            "title": "Routes and Controllers"
        }, 
        {
            "location": "/laravel/routes/#restful", 
            "text": "Note  Some refactoring need   Sharelov (with just a few exceptions) uses  RESTful  routes and controllers. Routes and controllers use  RESTful  conventions:     Verb  Path  Action  Route Name      GET  /brand  index  brand.index    GET  /brand/create  create  brand.create    POST  /brand  store  brand.store    GET  /brand/{brand_id}  show  brand.show    GET  /brand/{brand_id}/edit  edit  brand.edit    PUT/PATCH  /brand/{brand_id}  update  brand.update    DELETE  /brand/{brand_id}  destroy  brand.destroy      Note  PUT/PATCH  is not currently been used   This is very important, since it goes in hand with Sharelov's  Permission  system ( \ud83d\udcc4 ) and also helps, in a way, with the  subscription  model.", 
            "title": "RESTful"
        }, 
        {
            "location": "/laravel/routes/#routing", 
            "text": "Note   Some refactoring need  Location may change when Sharelov is updated to Laravel 5.3    Routes  primary files are located in:  App\\Http\\ .  Routes  are divided by  Web  (routes_web.php),  Webhooks  (routes_web_hooks.php) and  API  (routes_api.php) (currently not used). These files contain, either  Routes  or/and  includes  to other files in the  Routes  folder.  Routes includes  are grouped, for the most part, by first-class citizen  domain components , with the exception of functional ones like auth or the ones used for testing.", 
            "title": "Routing"
        }, 
        {
            "location": "/laravel/routes/#writing-routes", 
            "text": "These are some of the rules that must be enforced when creating/updating  routes :   For consistency no closures are used, so all  routes  have a controller associated to it.  All  routes   must have names . Names must use the  RESTful  convention, example:  brands.create .  For consistency no  Route Model Binding  is used.   Also, for the most part, Sharelov uses  RESTful nested resources  to organize as a way to organize routes and controllers.  Here's an example:  // brands.campaigns.index\n// line brakes for readability\n// and documentation\nRoute::get(\n    // url match\n    'brands/{brand_id}/campaigns/',\n    // options array\n    [\n        // route name\n        'as' =  'brands.campaigns.index',\n        // controller associated\n        'uses' =  'CampaignsController@index'\n    ]\n);", 
            "title": "Writing Routes"
        }, 
        {
            "location": "/laravel/routes/#controllers", 
            "text": "Controllers are located in  App\\Http\\Controllers .   Note  Some refactoring need   Controllers are, for the most part, by the website sections.  Controllers in Sharelov follow the following rules:   The controller's name describe the component or subcomponent and always include the word  Component  at the end, example:  BrandsController ,  BrandsUploadsController .  Dependency injection  is used using constructor or method injection.  Since we are working with  RESTful ,  all public methods must conform to the  RESTful  naming convention . Each public method must be name the same as a  RESTful  action (index, create, store, show, edit, update, destroy) and each controller should not have more than seven public methods.  Controllers are allowed to have protected (internal) methods that don't follow the  RESTful  convention.  For components related to a controller (files, comments, etc.)  a new controller should be created with one or more of the  RESTful  methods .  The name of the controller should define the type of action, not the methods. For example:  CampaingImagesController ,  CampaingCommentsController .   Here's an example of a  RESTful  controllers:  ?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\n/**\n * Display a listing of the resource.\n */\nclass WidgetController extends Controller\n{\n   /**\n    * Display a listing of the resource.\n    *\n    * @return Response\n    */\n   public function index()\n   {\n       //\n   }\n\n   /**\n    * Show the form for creating a new resource.\n    *\n    * @return Response\n    */\n   public function create()\n   {\n       //\n   }\n\n   /**\n    * Store a newly created resource in storage.\n    *\n    * @param  Request  $request\n    * @return Response\n    */\n   public function store(Request $request)\n   {\n       //\n   }\n\n   /**\n    * Display the specified resource.\n    *\n    * @param  int  $id\n    * @return Response\n    */\n   public function show($id)\n   {\n       //\n   }\n\n   /**\n    * Show the form for editing the specified resource.\n    *\n    * @param  int  $id\n    * @return Response\n    */\n   public function edit($id)\n   {\n       //\n   }\n\n   /**\n    * Update the specified resource in storage.\n    *\n    * @param  Request  $request\n    * @param  int  $id\n    * @return Response\n    */\n   public function update($id, Request $request)\n   {\n       //\n   }\n\n   /**\n    * Remove the specified resource from storage.\n    *\n    * @param  int  $id\n    * @return Response\n    */\n   public function destroy($id)\n   {\n       //\n   }\n}", 
            "title": "Controllers"
        }, 
        {
            "location": "/laravel/models/", 
            "text": "Models\n\n\nModels are located in \nApp\\Models\n.\n\n\nAll \nModels\n should be named using \nLaravel Model Conventions\n and must be extended from the \nApp\\Models\\ModelBase\n class.\n\n\nAs explained in \nthis section\n, we never invoke the \nModels\n directly. In order to interact with the database we use \nRepositories\n. \nModels\n mostly contain just \nrelations\n (\n\ud83d\udcc4\n), \nmutators\n (\n\ud83d\udcc4\n) and, \nlocal scopes\n and \nglobal scopes\n (\n\ud83d\udcc4\n).\n\n\nModel Relations\n\n\nSo far, there are two ways a secondary component can be associated (joined) to a primary component in the database/model:\n\n\n\n\nDirect relations, and\n\n\nPolymorphic relations\n\n\n\n\nDirect (Explicit) Relation\n\n\nSharelov uses Classic direct \none to many\n relations in cases when the secondary component can exclusively belong to a primary one. The best example is the relationship between \nBrand\n and \nCampaign\n: A \nCampaign\n can only belong to a \nBrand\n. For this relation there must be a field in the secondary component (\nCampaign\n)'s database table that describes the association, in this case \nbrand_id\n. The relation must also be described in the \nmodel\n using \nOne To Many \n relation.\n\n\nRelation example on the \nmodel\n:\n\n\n// primary model relation\npublic function campaigns()\n{\n    return $this-\nhasMany(App\\Models\\Campaign::class);\n}\n\n\n\n\n// secondary model relation\npublic function brand()\n{\n    return $this-\nbelongsTo(App\\Models\\Brand::class);\n}\n\n\n\n\nPolymorphic Relation\n\n\nSharelov also uses \nPolymorphic Relations\n when the secondary component can be owned by two or more different primary components. Sharelov uses \ncontent types\n (\n\ud83d\udcc4\n) to decide which \nmodel\n belongs to the primary component. One example is the \nComment model\n. A \ncomment\n can be associated to multiple \ncontent types\n, example: \nBrand\n, \nCampaign\n, etc. For that to happen all secondary polymorphic component have two special fields in the database table:\n\n\n\n\nNote\n\n\nIt's been considered to change the names of the fields to the ones Laravel uses\n\n\n\n\n\n\ntipo\n: The Primary component \nmodel type\n.\n\n\nrelacion_id\n: The Primary component primary id.\n\n\n\n\nRelation example on the \nmodel\n:\n\n\n// primary model relation\npublic function comments()\n{\n    return $this-\nhasMany(App\\Models\\Comment::class, 'relacion_id')\n        // specify the content type of the secondary table\n        -\nwhere('comments.tipo', '=', 'campaigns');\n}\n\n// secondary model relation\npublic function campaign()\n{\n    return $this-\nbelongsTo(App\\Models\\Campaign::class, 'relacion_id');\n}", 
            "title": "Models"
        }, 
        {
            "location": "/laravel/models/#models", 
            "text": "Models are located in  App\\Models .  All  Models  should be named using  Laravel Model Conventions  and must be extended from the  App\\Models\\ModelBase  class.  As explained in  this section , we never invoke the  Models  directly. In order to interact with the database we use  Repositories .  Models  mostly contain just  relations  ( \ud83d\udcc4 ),  mutators  ( \ud83d\udcc4 ) and,  local scopes  and  global scopes  ( \ud83d\udcc4 ).", 
            "title": "Models"
        }, 
        {
            "location": "/laravel/models/#model-relations", 
            "text": "So far, there are two ways a secondary component can be associated (joined) to a primary component in the database/model:   Direct relations, and  Polymorphic relations", 
            "title": "Model Relations"
        }, 
        {
            "location": "/laravel/models/#direct-explicit-relation", 
            "text": "Sharelov uses Classic direct  one to many  relations in cases when the secondary component can exclusively belong to a primary one. The best example is the relationship between  Brand  and  Campaign : A  Campaign  can only belong to a  Brand . For this relation there must be a field in the secondary component ( Campaign )'s database table that describes the association, in this case  brand_id . The relation must also be described in the  model  using  One To Many   relation.  Relation example on the  model :  // primary model relation\npublic function campaigns()\n{\n    return $this- hasMany(App\\Models\\Campaign::class);\n}  // secondary model relation\npublic function brand()\n{\n    return $this- belongsTo(App\\Models\\Brand::class);\n}", 
            "title": "Direct (Explicit) Relation"
        }, 
        {
            "location": "/laravel/models/#polymorphic-relation", 
            "text": "Sharelov also uses  Polymorphic Relations  when the secondary component can be owned by two or more different primary components. Sharelov uses  content types  ( \ud83d\udcc4 ) to decide which  model  belongs to the primary component. One example is the  Comment model . A  comment  can be associated to multiple  content types , example:  Brand ,  Campaign , etc. For that to happen all secondary polymorphic component have two special fields in the database table:   Note  It's been considered to change the names of the fields to the ones Laravel uses    tipo : The Primary component  model type .  relacion_id : The Primary component primary id.   Relation example on the  model :  // primary model relation\npublic function comments()\n{\n    return $this- hasMany(App\\Models\\Comment::class, 'relacion_id')\n        // specify the content type of the secondary table\n        - where('comments.tipo', '=', 'campaigns');\n}\n\n// secondary model relation\npublic function campaign()\n{\n    return $this- belongsTo(App\\Models\\Campaign::class, 'relacion_id');\n}", 
            "title": "Polymorphic Relation"
        }, 
        {
            "location": "/laravel/config/", 
            "text": "Configuration Files\n\n\nConfig\n Files are located in the \nconfig\n folder.\n\n\n\n\nNote\n\n\nBig\n refactoring in progress\n\n\n\n\nLike Laravel, Sharelov also uses \nconfig\n files. Sharelov \nconfig\n files live in the folder: \nconfig\\sharelov\n.\n\n\nConfig\n files must be grouped, for the most part, by first-class citizen \ndomain components\n.\n\n\nConfig\n files contain \nnon callable\n (not functions) configuration. Examples: integers, strings, booleans and arrays. If a more flexible \nconfig\n is needed the \nRepositoriesFlat\n (\n\ud83d\udcc4\n) can be used.", 
            "title": "Configuration Files"
        }, 
        {
            "location": "/laravel/config/#configuration-files", 
            "text": "Config  Files are located in the  config  folder.   Note  Big  refactoring in progress   Like Laravel, Sharelov also uses  config  files. Sharelov  config  files live in the folder:  config\\sharelov .  Config  files must be grouped, for the most part, by first-class citizen  domain components .  Config  files contain  non callable  (not functions) configuration. Examples: integers, strings, booleans and arrays. If a more flexible  config  is needed the  RepositoriesFlat  ( \ud83d\udcc4 ) can be used.", 
            "title": "Configuration Files"
        }, 
        {
            "location": "/laravel/providers/", 
            "text": "Service Providers\n\n\nService Providers are located in \nApp\\Providers\n.\n\n\nSharelov uses three \nservice providers\n:\n\n\n\n\n\n\nLibreriaProvider\n is the main provider with all the app's \nbindings\n, \nobservers\n and \nview composers\n.\n\n\n\n\n\n\nLibreriaMacrosProvider\n is where all the \nHTML and Form macros\n live.\n\n\n\n\n\n\nSubscriptionProvider\n contains all the bindings related to the subscription service", 
            "title": "Service Providers"
        }, 
        {
            "location": "/laravel/providers/#service-providers", 
            "text": "Service Providers are located in  App\\Providers .  Sharelov uses three  service providers :    LibreriaProvider  is the main provider with all the app's  bindings ,  observers  and  view composers .    LibreriaMacrosProvider  is where all the  HTML and Form macros  live.    SubscriptionProvider  contains all the bindings related to the subscription service", 
            "title": "Service Providers"
        }, 
        {
            "location": "/laravel/events/", 
            "text": "Events and Listeners\n\n\nSharelov uses Laravel \nevents and listeners\n to do asynchronous computing intensive tasks. We use \nevents\n for tasks like Mailing, Logging and complex API calls, or when it makes sense to have an organized list of secondary actions to follow a primary action.\n\n\nQueue\n\n\n\n\nNote\n\n\nSome refactoring need\n\n\n\n\nSharelov uses a \nQueue\n for all asynchronous tasks, and for that reason all the \nListeners\n implement the \nShouldQueue\n interface.\n\n\nSharelov uses the amazon service \nSQS\n for the \nqueue\n.\n\n\nEvents\n\n\nEvents\n are located in: \nApp\\Events\\\n.\n\n\nEvents\n are grouped in folders and organized, for the most part, by first-class citizen \ndomain components\n.\n\n\nThese are some of the rules that must be enforced when creating/updating \nevents\n:\n\n\n\n\nWe usually, but not exclusively, use \nevents\n when our main \ndomain\n components change: \nBrandWasCreated\n, \nCampaignWasAuthorized\n, etc.\n\n\nEvents\n are usually named in past tense: \nMembershipWasCreated\n to reflect the event.\n\n\nEvents\n are usually (but not exclusively) triggered in the appropriate \nRepository\n's method. For example: \nMembershipWasCreated\n is triggered in \nMembershipRepositoryEloquent::create()\n.\n\n\nSince all classes sent to the \nqueue\n are \nserialized\n it's better to convert models and eloquent collections to array using the \ntoArray()\n method in order to avoid headaches when the Listener receives the data to be processed.\n\n\n\n\nListeners\n\n\nListeners\n are located in: \nApp\\Listeners\\\n.\n\n\nListeners\n are grouped in folders and organized, for the most part, by first-class citizen \ndomain components\n.\n\n\nListeners\n are registered in the \nevent service provider\n\n\nThese are some of the rules that must be enforced when creating/updating \nevents\n:\n\n\n\n\nListeners\n are usually named in present tense: \nSendCampaignNotification\n to reflect the action.", 
            "title": "Events"
        }, 
        {
            "location": "/laravel/events/#events-and-listeners", 
            "text": "Sharelov uses Laravel  events and listeners  to do asynchronous computing intensive tasks. We use  events  for tasks like Mailing, Logging and complex API calls, or when it makes sense to have an organized list of secondary actions to follow a primary action.", 
            "title": "Events and Listeners"
        }, 
        {
            "location": "/laravel/events/#queue", 
            "text": "Note  Some refactoring need   Sharelov uses a  Queue  for all asynchronous tasks, and for that reason all the  Listeners  implement the  ShouldQueue  interface.  Sharelov uses the amazon service  SQS  for the  queue .", 
            "title": "Queue"
        }, 
        {
            "location": "/laravel/events/#events", 
            "text": "Events  are located in:  App\\Events\\ .  Events  are grouped in folders and organized, for the most part, by first-class citizen  domain components .  These are some of the rules that must be enforced when creating/updating  events :   We usually, but not exclusively, use  events  when our main  domain  components change:  BrandWasCreated ,  CampaignWasAuthorized , etc.  Events  are usually named in past tense:  MembershipWasCreated  to reflect the event.  Events  are usually (but not exclusively) triggered in the appropriate  Repository 's method. For example:  MembershipWasCreated  is triggered in  MembershipRepositoryEloquent::create() .  Since all classes sent to the  queue  are  serialized  it's better to convert models and eloquent collections to array using the  toArray()  method in order to avoid headaches when the Listener receives the data to be processed.", 
            "title": "Events"
        }, 
        {
            "location": "/laravel/events/#listeners", 
            "text": "Listeners  are located in:  App\\Listeners\\ .  Listeners  are grouped in folders and organized, for the most part, by first-class citizen  domain components .  Listeners  are registered in the  event service provider  These are some of the rules that must be enforced when creating/updating  events :   Listeners  are usually named in present tense:  SendCampaignNotification  to reflect the action.", 
            "title": "Listeners"
        }, 
        {
            "location": "/laravel/validation/", 
            "text": "Validation\n\n\nSharelov uses \nPosts Requests\n when a form validation is needed. For consistency, \nno form validation should be done in the controller\n.\n\n\nPost Requests\n\n\n\n\nNote\n\n\nSome refactoring need\n\n\n\n\nPosts Requests\n are located in \nApp\\Http\\Requests\n.\n\n\nPosts Requests\n are grouped in folders, for the most part, by first-class citizen \ndomain components\n.\n\n\nAll \nPosts Requests\n classes must be extended from the \nApp\\Http\\Requests\n class, which have extra functionality useful when doing validation. Other extended classes are used when necessary.\n\n\nInput Sanitation\n\n\nIt's possible to sanitize user input content using the method \nsanitize()\n located in \nApp\\Http\\Requests\n. PHP \nfilter_var\n and \nSanitation Filters\n are used to perform the sanitation.\n\n\nIn order to know which inputs and what type of sanitation will be applied the \npost request\n class must have an attribute \n$sanitize_rules\n with an array of the sanitation rules. Example:\n\n\n/**\n * Sanitation Rules\n */\nprotected $sanitize_rules = [\n    // single\n    'name' =\n FILTER_SANITIZE_SPECIAL_CHARS,\n    // array\n    'lastname' =\n [\n        'rules' =\n array(FILTER_SANITIZE_SPECIAL_CHARS, ),\n        'options' =\n array()\n    ]\n];\n\n\n\n\n\n\nThe key of the array should be the name of the form input.\n\n\nThe value of the array depends on how many sanitation you want to apply:\n\n\nA string with the \nSanitation Filter\n is enough if a single sanitation with no \noptions\n for \nfilter_var\n needs to be applied.\n\n\nif More than one needs to be applied an array of matching \nSanitation Filter\n and \noptions\n must be provided (\nexperimental\n).\n\n\n\n\n\n\n\n\nAfter that, the method \nsanitize()\n needs to be called inside the \nrules()\n method:\n\n\n/**\n * Get the validation rules that apply to the request.\n *\n * @return array\n */\npublic function rules()\n{\n    // sanitize\n    $this-\nsanitize();\n\n    // rules\n    return [\n        'email' =\n 'required|email', 'password' =\n 'required'\n    ];\n}", 
            "title": "Validation"
        }, 
        {
            "location": "/laravel/validation/#validation", 
            "text": "Sharelov uses  Posts Requests  when a form validation is needed. For consistency,  no form validation should be done in the controller .", 
            "title": "Validation"
        }, 
        {
            "location": "/laravel/validation/#post-requests", 
            "text": "Note  Some refactoring need   Posts Requests  are located in  App\\Http\\Requests .  Posts Requests  are grouped in folders, for the most part, by first-class citizen  domain components .  All  Posts Requests  classes must be extended from the  App\\Http\\Requests  class, which have extra functionality useful when doing validation. Other extended classes are used when necessary.", 
            "title": "Post Requests"
        }, 
        {
            "location": "/laravel/validation/#input-sanitation", 
            "text": "It's possible to sanitize user input content using the method  sanitize()  located in  App\\Http\\Requests . PHP  filter_var  and  Sanitation Filters  are used to perform the sanitation.  In order to know which inputs and what type of sanitation will be applied the  post request  class must have an attribute  $sanitize_rules  with an array of the sanitation rules. Example:  /**\n * Sanitation Rules\n */\nprotected $sanitize_rules = [\n    // single\n    'name' =  FILTER_SANITIZE_SPECIAL_CHARS,\n    // array\n    'lastname' =  [\n        'rules' =  array(FILTER_SANITIZE_SPECIAL_CHARS, ),\n        'options' =  array()\n    ]\n];   The key of the array should be the name of the form input.  The value of the array depends on how many sanitation you want to apply:  A string with the  Sanitation Filter  is enough if a single sanitation with no  options  for  filter_var  needs to be applied.  if More than one needs to be applied an array of matching  Sanitation Filter  and  options  must be provided ( experimental ).     After that, the method  sanitize()  needs to be called inside the  rules()  method:  /**\n * Get the validation rules that apply to the request.\n *\n * @return array\n */\npublic function rules()\n{\n    // sanitize\n    $this- sanitize();\n\n    // rules\n    return [\n        'email' =  'required|email', 'password' =  'required'\n    ];\n}", 
            "title": "Input Sanitation"
        }, 
        {
            "location": "/laravel/views/", 
            "text": "Views\n\n\nViews are located in \nresources\\views\n.\n\n\n\n\nNote\n\n\nSome refactoring need\n\n\n\n\nViews\n are grouped in folders, for the most part, by the website sections and usually have a \ncontroller\n's method counterpart (with the exception of \npartials\n). There are also layout and component folders that should be named stating with an underscore ( _ ), for example: \n_layout\n.\n\n\nNaming\n\n\nViews\n associated with the \ncontroller\n must be named in \nlowercase\n and using \nRESTful\n convention, according to the primary \ncontroller\n public methods, examples:\n\n\n- index.blade.php\n- create.blade.php\n- edit.blade.php\n\n\n\n\nFor \nviews\n that have two or more words (mostly partials), words must be separated by an underscore ( _ ). Example: \ncampaign_comments.blade.php\n.\n\n\nSub Organization\n\n\n\n\nNote\n\n\nSome refactoring need\n\n\n\n\nInside a primary folder, the section should preferably be organized the following way:\n\n\n\n\nViews\n from the primary controller must be in the root of the primary folder.\n\n\nSubsections\n must be inside a folder resembling the same folder structure of the primary folder.\n\n\nThe \npartial\n folder contains code that can be reused throughout the section. It must be named with an underscore ( _ ) prefix and can contain either files, or, if further organization needed, other folders. \nPartials\n folders can also be included in a \nSubsections\n if necessary.\n\n\n\n\n// first level (primary folder)\n- campaigns (`folder`)\n    // first level partials\n    - _partials (`folder`)\n        - forms (`folder`)\n            - form_create.blade.php (`file`)\n        - sidebars (`folder`)\n            - info.blade.php (`file`)\n    // Subsection\n    - images (`folder`)\n        // second level partials\n        - _partials (`folder`)\n            - form.blade.php (`file`)\n        - create.blade.php (`file`)\n    - index.blade.php (`file`)\n    - create.blade.php (`file`)\n\n\n\n\nOff Canvas\n\n\nAs mentioned in \nProgressive Enhancement\n, \nOff Canvas\n pages and templates should be treated as \nSubsections\n and have the same organization mentioned above.", 
            "title": "Views"
        }, 
        {
            "location": "/laravel/views/#views", 
            "text": "Views are located in  resources\\views .   Note  Some refactoring need   Views  are grouped in folders, for the most part, by the website sections and usually have a  controller 's method counterpart (with the exception of  partials ). There are also layout and component folders that should be named stating with an underscore ( _ ), for example:  _layout .", 
            "title": "Views"
        }, 
        {
            "location": "/laravel/views/#naming", 
            "text": "Views  associated with the  controller  must be named in  lowercase  and using  RESTful  convention, according to the primary  controller  public methods, examples:  - index.blade.php\n- create.blade.php\n- edit.blade.php  For  views  that have two or more words (mostly partials), words must be separated by an underscore ( _ ). Example:  campaign_comments.blade.php .", 
            "title": "Naming"
        }, 
        {
            "location": "/laravel/views/#sub-organization", 
            "text": "Note  Some refactoring need   Inside a primary folder, the section should preferably be organized the following way:   Views  from the primary controller must be in the root of the primary folder.  Subsections  must be inside a folder resembling the same folder structure of the primary folder.  The  partial  folder contains code that can be reused throughout the section. It must be named with an underscore ( _ ) prefix and can contain either files, or, if further organization needed, other folders.  Partials  folders can also be included in a  Subsections  if necessary.   // first level (primary folder)\n- campaigns (`folder`)\n    // first level partials\n    - _partials (`folder`)\n        - forms (`folder`)\n            - form_create.blade.php (`file`)\n        - sidebars (`folder`)\n            - info.blade.php (`file`)\n    // Subsection\n    - images (`folder`)\n        // second level partials\n        - _partials (`folder`)\n            - form.blade.php (`file`)\n        - create.blade.php (`file`)\n    - index.blade.php (`file`)\n    - create.blade.php (`file`)", 
            "title": "Sub Organization"
        }, 
        {
            "location": "/laravel/views/#off-canvas", 
            "text": "As mentioned in  Progressive Enhancement ,  Off Canvas  pages and templates should be treated as  Subsections  and have the same organization mentioned above.", 
            "title": "Off Canvas"
        }, 
        {
            "location": "/sharelov/intro/", 
            "text": "Introduction\n\n\nFor the most part Sharelov lives inside the \nApp\\Libreria\n folder.", 
            "title": "Introduction"
        }, 
        {
            "location": "/sharelov/intro/#introduction", 
            "text": "For the most part Sharelov lives inside the  App\\Libreria  folder.", 
            "title": "Introduction"
        }, 
        {
            "location": "/sharelov/structure/", 
            "text": "Sharelov Files Structure\n\n\n\n\nNote\n\n\nSome refactoring need\n\n\n\n\nSharelov live in \napp\\Libreria\\\n and are structured the following way. The ones marked \npackage\n are might be converted to php packages\n\n\n\n\nLibreria\n\n\nAssets (\npackage?\n)\n\n\nComposers\n\n\nEloquent\n\n\nScopes (\nglobal scope\n helpers)\n\n\n\n\n\n\nExport (\npackage\n)\n\n\nExterno\n\n\nFacades\n\n\nFiltros (\npackage\n)\n\n\nHelpers (helper functions)\n\n\nMenu (\npackage\n)\n\n\nModelUtilities (to be renamed/re-structured) \nKill it with fire\n \ud83d\udd25\n\n\nNotifications (\npackage\n)\n\n\nObservers\n\n\nPublications (publications will be promoted to first class citizens)\n\n\nRepositories\n\n\nRepositoriesFlat\n\n\nSearch (\npackage\n)\n\n\nSocialAccounts\n\n\nSubscriptions\n\n\nTemplates\n\n\nThumbnails (\npackage?\n)\n\n\nTraits\n\n\nUser\n\n\nUtilidades (single file utility clases) \nKill it slowly\n \ud83d\udd25", 
            "title": "Files Structure"
        }, 
        {
            "location": "/sharelov/structure/#sharelov-files-structure", 
            "text": "Note  Some refactoring need   Sharelov live in  app\\Libreria\\  and are structured the following way. The ones marked  package  are might be converted to php packages   Libreria  Assets ( package? )  Composers  Eloquent  Scopes ( global scope  helpers)    Export ( package )  Externo  Facades  Filtros ( package )  Helpers (helper functions)  Menu ( package )  ModelUtilities (to be renamed/re-structured)  Kill it with fire  \ud83d\udd25  Notifications ( package )  Observers  Publications (publications will be promoted to first class citizens)  Repositories  RepositoriesFlat  Search ( package )  SocialAccounts  Subscriptions  Templates  Thumbnails ( package? )  Traits  User  Utilidades (single file utility clases)  Kill it slowly  \ud83d\udd25", 
            "title": "Sharelov Files Structure"
        }, 
        {
            "location": "/sharelov/environments/", 
            "text": "Sharelov Environments\n\n\nSharelov runs in three different environments and they all have different .env file:\n\n\n\n\nlocal\n: Local machine.\n\n\ntesting\n: Remote Testing server.\n\n\nproduction\n: Production server\n\n\n\n\nThe .env File\n\n\nThe \n.env\n file contains Sharelov's environment configuration values. In addition to \nLaravel's .env file\n values, Sharelov's \n.env\n file has a number of custom configuration values that are either environment dependent or are sensible information.\n\n\nIt's important to know that, if the default is going to be used, the configuration is not needed to be in the \n.env\n file.\n\n\nHere's a list and an explanation of the configuration keys:\n\n\nGeneral Configuration\n\n\n\n\nDEV_EMAIL\n - \nstring\n: Developer's email used by the \nUsersTableSeeder\n seeder.\n\n\nDEV_PASSWORD\n - \nstring\n: Developer's password used by the \nUsersTableSeeder\n seeder.\n\n\nDISABLE_SIGNUP\n - \nboolean\n: Disables \nSharelov's sign up form\n. Defaults to \nfalse\n.\n\n\nCACHE_SUBSCRIPTION_SERVICE\n - \ninteger\n: Caches the subscription service request for the Account Section in minutes. Defaults to \n0\n.\n\n\nWEBHOOKS_MOCK\n - \nboolean\n: Uses a mock data (from \nstorage/app/subscriptions_requests/Webhooks/\n) in order to locally tests \nWebhooks\n. Defaults to \nfalse\n.\n\n\nPRETEND_SOCIAL_PUBLISH\n - \nboolean\n: Simulates social publishing for the publications for local testing. Defaults to \nfalse\n.\n\n\nDBG_ENABLED\n - \nboolean\n: Enables the \nDebugbar\n package for local testing. Defaults to \nfalse\n.\n\n\nFS_UPLOADS\n - \nstring\n: \nFilesystem type\n for uploads. Defaults to \nlocal\n.\n\n\nCACHE_CONNECTION\n - \nstring\n: Redis connection name for the Cache. Defaults to \ndefault\n.\n\n\n\n\nSocial Accounts Configuration\n\n\n\n\nSOCIAL_FB_ID\n - \nstring\n: Facebook App Id.\n\n\nSOCIAL_FB_SECRET\n - \nstring\n: Facebook App Secret.\n\n\nSOCIAL_TW_ID\n - \nstring\n: Twitter App Id.\n\n\nSOCIAL_TW_SECRET\n - \nstring\n: Twitter App Secret.\n\n\n\n\nChargify Configuration\n\n\nSharelov uses \nChargify\n for subscription and charging. Depending on the environment the configuration is different.\n\n\n\n\nCHARGIFY_HOSTNAME\n - \nstring\n:  Chargify App Hostname.\n\n\nCHARGIFY_API_KEY\n - \nstring\n: Chargify App API Key.\n\n\nCHARGIFY_SHARED_KEY\n - \nstring\n:  Chargify App Shared Key.\n\n\nCHARGIFY_DIRECT_API_KEY\n - \nstring\n: Chargify App Direct API Key.\n\n\nCHARGIFY_DIRECT_API_SECRET\n - \nstring\n: Chargify App Direct API Secret.\n\n\nCHARGIFY_DIRECT_API_PASSWORD\n - \nstring\n: Chargify App Direct API Passsword.\n\n\nCHARGIFY_USER_COMPONENT_ID\n - \ninteger\n: Chargify App User Component Id.\n\n\nCHARGIFY_USER_AGENT\n - \nstring\n: Chargify App user agent.\n\n\n\n\nAWS Confirguration\n\n\nSharelov integrates with \nAmazon Web Services\n (AWS) services, like \nS3\n for storage, \nSES\n for emails and \nSQS\n queue. Depending on the environment the configuration is different.\n\n\n\n\nS3_KEY\n - \nstring\n: S3 Key.\n\n\nS3_SECRET\n - \nstring\n: S3 Secret.\n\n\nS3_BUCKET\n - \nstring\n: S3 Bucket.\n\n\nSQS_NAME\n - \nstring\n: SQS Name.\n\n\nSQS_ACCOUNT_ID\n - \ninteger\n: SQS Account ID.\n\n\nSQS_KEY\n - \nstring\n: SQS Key.\n\n\nSQS_SECRET\n - \nstring\n: SQS Secret.\n\n\n\n\nIntercom Configuration\n\n\nSharelov uses \nIntercom\n for customer support\n\n\n\n\nINTERCOM_KEY\n - \nstring\n: Intercom App Key.", 
            "title": "Environment"
        }, 
        {
            "location": "/sharelov/environments/#sharelov-environments", 
            "text": "Sharelov runs in three different environments and they all have different .env file:   local : Local machine.  testing : Remote Testing server.  production : Production server", 
            "title": "Sharelov Environments"
        }, 
        {
            "location": "/sharelov/environments/#the-env-file", 
            "text": "The  .env  file contains Sharelov's environment configuration values. In addition to  Laravel's .env file  values, Sharelov's  .env  file has a number of custom configuration values that are either environment dependent or are sensible information.  It's important to know that, if the default is going to be used, the configuration is not needed to be in the  .env  file.  Here's a list and an explanation of the configuration keys:", 
            "title": "The .env File"
        }, 
        {
            "location": "/sharelov/environments/#general-configuration", 
            "text": "DEV_EMAIL  -  string : Developer's email used by the  UsersTableSeeder  seeder.  DEV_PASSWORD  -  string : Developer's password used by the  UsersTableSeeder  seeder.  DISABLE_SIGNUP  -  boolean : Disables  Sharelov's sign up form . Defaults to  false .  CACHE_SUBSCRIPTION_SERVICE  -  integer : Caches the subscription service request for the Account Section in minutes. Defaults to  0 .  WEBHOOKS_MOCK  -  boolean : Uses a mock data (from  storage/app/subscriptions_requests/Webhooks/ ) in order to locally tests  Webhooks . Defaults to  false .  PRETEND_SOCIAL_PUBLISH  -  boolean : Simulates social publishing for the publications for local testing. Defaults to  false .  DBG_ENABLED  -  boolean : Enables the  Debugbar  package for local testing. Defaults to  false .  FS_UPLOADS  -  string :  Filesystem type  for uploads. Defaults to  local .  CACHE_CONNECTION  -  string : Redis connection name for the Cache. Defaults to  default .", 
            "title": "General Configuration"
        }, 
        {
            "location": "/sharelov/environments/#social-accounts-configuration", 
            "text": "SOCIAL_FB_ID  -  string : Facebook App Id.  SOCIAL_FB_SECRET  -  string : Facebook App Secret.  SOCIAL_TW_ID  -  string : Twitter App Id.  SOCIAL_TW_SECRET  -  string : Twitter App Secret.", 
            "title": "Social Accounts Configuration"
        }, 
        {
            "location": "/sharelov/environments/#chargify-configuration", 
            "text": "Sharelov uses  Chargify  for subscription and charging. Depending on the environment the configuration is different.   CHARGIFY_HOSTNAME  -  string :  Chargify App Hostname.  CHARGIFY_API_KEY  -  string : Chargify App API Key.  CHARGIFY_SHARED_KEY  -  string :  Chargify App Shared Key.  CHARGIFY_DIRECT_API_KEY  -  string : Chargify App Direct API Key.  CHARGIFY_DIRECT_API_SECRET  -  string : Chargify App Direct API Secret.  CHARGIFY_DIRECT_API_PASSWORD  -  string : Chargify App Direct API Passsword.  CHARGIFY_USER_COMPONENT_ID  -  integer : Chargify App User Component Id.  CHARGIFY_USER_AGENT  -  string : Chargify App user agent.", 
            "title": "Chargify Configuration"
        }, 
        {
            "location": "/sharelov/environments/#aws-confirguration", 
            "text": "Sharelov integrates with  Amazon Web Services  (AWS) services, like  S3  for storage,  SES  for emails and  SQS  queue. Depending on the environment the configuration is different.   S3_KEY  -  string : S3 Key.  S3_SECRET  -  string : S3 Secret.  S3_BUCKET  -  string : S3 Bucket.  SQS_NAME  -  string : SQS Name.  SQS_ACCOUNT_ID  -  integer : SQS Account ID.  SQS_KEY  -  string : SQS Key.  SQS_SECRET  -  string : SQS Secret.", 
            "title": "AWS Confirguration"
        }, 
        {
            "location": "/sharelov/environments/#intercom-configuration", 
            "text": "Sharelov uses  Intercom  for customer support   INTERCOM_KEY  -  string : Intercom App Key.", 
            "title": "Intercom Configuration"
        }, 
        {
            "location": "/sharelov/content-types/", 
            "text": "Content Types\n\n\nContent Types\n are keywords used to describe \nPolymorphic Relations\n. All \nContent Types\n are named using \nlowercase\n, in \nplural\n form and, for those with more than one word. Words must be separated by an underscore ( _ ).\n\n\nAvailable Content Types\n\n\nAll \nContent Type\n are associated to a specific model:\n\n\nPrimary\n\n\n\n\nbrands\n: Brand Model.\n\n\ncampaigns\n: Campaign Model.\n\n\nPublications (\nno \npublications\n content type\n)\n\n\nposts\n: Publications\\Post Model.\n\n\ntweets\n: Publications\\Tweet Model.\n\n\n\n\n\n\nusers\n: User Model.\n\n\n\n\nSecundary\n\n\n\n\nmemberships\n: Membership Model.\n\n\ncomments\n: Comment Model.", 
            "title": "Content Types"
        }, 
        {
            "location": "/sharelov/content-types/#content-types", 
            "text": "Content Types  are keywords used to describe  Polymorphic Relations . All  Content Types  are named using  lowercase , in  plural  form and, for those with more than one word. Words must be separated by an underscore ( _ ).", 
            "title": "Content Types"
        }, 
        {
            "location": "/sharelov/content-types/#available-content-types", 
            "text": "All  Content Type  are associated to a specific model:", 
            "title": "Available Content Types"
        }, 
        {
            "location": "/sharelov/content-types/#primary", 
            "text": "brands : Brand Model.  campaigns : Campaign Model.  Publications ( no  publications  content type )  posts : Publications\\Post Model.  tweets : Publications\\Tweet Model.    users : User Model.", 
            "title": "Primary"
        }, 
        {
            "location": "/sharelov/content-types/#secundary", 
            "text": "memberships : Membership Model.  comments : Comment Model.", 
            "title": "Secundary"
        }, 
        {
            "location": "/sharelov/user-types/", 
            "text": "User Types/ User Levels\n\n\nUser Types\n are located in \nconfig\\usuarios.php\n.\n\n\n\n\nNote\n\n\nUser Types\n used to be called \nUser Levels\n\n\n\n\nA \nuser type\n encapsulates a \nmembership\n (\n\ud83d\udcc4\n) into one of Sharelov's distinct user groups. These groups are stored as an array in the \nconfiguration folder\n (\n\ud83d\udcc4\n). Here's an \nup to date excel document\n showing the relation between \nuser types\n, \npermissions\n and \nauthorizations\n.\n\n\nA \nmembership\n can only have one \nuser type\n:\n\n\n\n\ncliente\n: A client type user.\n\n\nclient_editor\n: An client editor type user.\n\n\neditor\n: An editor type user.\n\n\ncommunity_manager\n: A community manager type user.\n\n\nadmin\n: A admin type user.\n\n\nowner\n: A owner type user.\n\n\n\n\nThe structure of the \nuser type\n array is as follows:\n\n\n// user types array\n[\n    // owner's user type\n    'owner' =\n [\n        'label' =\n 'Owner',\n        'campo' =\n 'owner',\n        'nivel' =\n 19,\n        'type' =\n 'global',\n        'visible' =\n true,\n    ],\n]\n\n\n\n\nThe Key of the array is the \nname\n of the \nuser type\n. The \nname\n cannot be changed since it is used throughout the app as a keyword. The content of the array is as follows:\n\n\n\n\nlabel\n \nstring\n: A user friendly caption. Commonly used to show the  \nuser type\n name to the user.\n\n\ncampo\n \nstring\n: For internal user. Commonly used as the value of the attribute \nname\n of a form input.\n\n\nnivel\n \ninteger\n: The numeric level of the \nuser type\n. Commonly used for user comparisons: \nisLevelHigherThan($level)\n.\n\n\ntype\n \nstring\n: Subtype of user. Used to create sub-groups. Two values are currently used: \nglobal\n and \ncliente\n.\n\n\nvisible\n \nboolean\n \ndeprecated\n: Visibility of a \nglobal\n type user. Used to differentiate between owners and webmaster. Currently not in use.", 
            "title": "User Types"
        }, 
        {
            "location": "/sharelov/user-types/#user-types-user-levels", 
            "text": "User Types  are located in  config\\usuarios.php .   Note  User Types  used to be called  User Levels   A  user type  encapsulates a  membership  ( \ud83d\udcc4 ) into one of Sharelov's distinct user groups. These groups are stored as an array in the  configuration folder  ( \ud83d\udcc4 ). Here's an  up to date excel document  showing the relation between  user types ,  permissions  and  authorizations .  A  membership  can only have one  user type :   cliente : A client type user.  client_editor : An client editor type user.  editor : An editor type user.  community_manager : A community manager type user.  admin : A admin type user.  owner : A owner type user.   The structure of the  user type  array is as follows:  // user types array\n[\n    // owner's user type\n    'owner' =  [\n        'label' =  'Owner',\n        'campo' =  'owner',\n        'nivel' =  19,\n        'type' =  'global',\n        'visible' =  true,\n    ],\n]  The Key of the array is the  name  of the  user type . The  name  cannot be changed since it is used throughout the app as a keyword. The content of the array is as follows:   label   string : A user friendly caption. Commonly used to show the   user type  name to the user.  campo   string : For internal user. Commonly used as the value of the attribute  name  of a form input.  nivel   integer : The numeric level of the  user type . Commonly used for user comparisons:  isLevelHigherThan($level) .  type   string : Subtype of user. Used to create sub-groups. Two values are currently used:  global  and  cliente .  visible   boolean   deprecated : Visibility of a  global  type user. Used to differentiate between owners and webmaster. Currently not in use.", 
            "title": "User Types/ User Levels"
        }, 
        {
            "location": "/sharelov/repositories/", 
            "text": "Repositories\n\n\nRepositories are located in \nApp\\Libreria\\Repositories\n.\n\n\nIn Sharelov, \nmodels\n are never accessed directly. \nRepositories\n are used to access \nmodels\n and to interact with \nLaravel's query builder\n. This allows us to move complicated logic to the repository and to keep the \nmodels\n with the essential like \nscopes\n, \nrelations\n and \nmutators\n. Sharelov uses the \nandersao/l5-repository\n php package.\n\n\nThings to remember:\n\n\n\n\nEach \nrepository\n is directly associated to a \nmodel\n.\n\n\nMost \nmodel\n's methods can be used with \nRepositories\n, but not all of them. Here's a list of \nrepositories methods\n\n\nThere are extra methods available to the repository implemented in \nApp\\Libreria\\Repositories\\RepositoriesBase\n.\n\n\nLike regular models, when getter methods are used on \nrepositories\n (\nfind()\n, \nall()\n, etc.) the return value is either a \nmodel\n, a \ncollection\n or a \npaginate\n instance.\n\n\n\n\n// Repositories are most likely instantiated  using dependency injection\n// Here the classic way is used\n\n// laravel app instance\n$laravel = app();\n// campaign repository\n$campaign_repository = new \\App\\Libreria\\Repositories\\CampaignRepositoryEloquent($laravel);\n\n// model returned\n$campaign = $campaign_repository-\nfind(1);\n$campaign =  $campaign_repository-\nfirst();\n\n// collection returned\n$campaigns = $campaign_repository-\nall();\n\n// paginate instance returned\n$paginated_campaigns = $campaign_repository-\npaginate();\n\n\n\n\nRepositories limit the way the database records are \ninserted\n, \nupdated\n and \ndeleted\n. This helps to keep the code consistent. For \ninserts\n and \nupdates\n repositories take an array of key values, representing \ndb fields =\n value\n. For \ndelections\n repositories take the primary of the record.\n\n\n// laravel app instance\n$laravel = app();\n// campaign repository\n$campaign_repository = new \\App\\Libreria\\Repositories\\CampaignRepositoryEloquent($laravel);\n\n// insert attributes array\n$attributes_insert = [\n    'brand_id' =\n 1,\n    'nombre' =\n 'Campaign #1',\n    'date_1' =\n '2016-10-01'\n    // etc\n];\n\n// Insert: returns the created campaign model\n$campaign = $campaign_repository-\ncreate(attributes);\n\n// update attributes  array\n$attributes_update = [\n    'nombre' =\n 'Campaign #1 updated',\n    // etc\n];\n\n// Update: returns the update campaign model\n$campaign = $campaign_repository-\nupdate(attributes, $campaign_id);\n\n// Delete: Returns Boolean\n$deleted = $campaign_repository-\ndelete($campaign-\nid);", 
            "title": "Repositories"
        }, 
        {
            "location": "/sharelov/repositories/#repositories", 
            "text": "Repositories are located in  App\\Libreria\\Repositories .  In Sharelov,  models  are never accessed directly.  Repositories  are used to access  models  and to interact with  Laravel's query builder . This allows us to move complicated logic to the repository and to keep the  models  with the essential like  scopes ,  relations  and  mutators . Sharelov uses the  andersao/l5-repository  php package.  Things to remember:   Each  repository  is directly associated to a  model .  Most  model 's methods can be used with  Repositories , but not all of them. Here's a list of  repositories methods  There are extra methods available to the repository implemented in  App\\Libreria\\Repositories\\RepositoriesBase .  Like regular models, when getter methods are used on  repositories  ( find() ,  all() , etc.) the return value is either a  model , a  collection  or a  paginate  instance.   // Repositories are most likely instantiated  using dependency injection\n// Here the classic way is used\n\n// laravel app instance\n$laravel = app();\n// campaign repository\n$campaign_repository = new \\App\\Libreria\\Repositories\\CampaignRepositoryEloquent($laravel);\n\n// model returned\n$campaign = $campaign_repository- find(1);\n$campaign =  $campaign_repository- first();\n\n// collection returned\n$campaigns = $campaign_repository- all();\n\n// paginate instance returned\n$paginated_campaigns = $campaign_repository- paginate();  Repositories limit the way the database records are  inserted ,  updated  and  deleted . This helps to keep the code consistent. For  inserts  and  updates  repositories take an array of key values, representing  db fields =  value . For  delections  repositories take the primary of the record.  // laravel app instance\n$laravel = app();\n// campaign repository\n$campaign_repository = new \\App\\Libreria\\Repositories\\CampaignRepositoryEloquent($laravel);\n\n// insert attributes array\n$attributes_insert = [\n    'brand_id' =  1,\n    'nombre' =  'Campaign #1',\n    'date_1' =  '2016-10-01'\n    // etc\n];\n\n// Insert: returns the created campaign model\n$campaign = $campaign_repository- create(attributes);\n\n// update attributes  array\n$attributes_update = [\n    'nombre' =  'Campaign #1 updated',\n    // etc\n];\n\n// Update: returns the update campaign model\n$campaign = $campaign_repository- update(attributes, $campaign_id);\n\n// Delete: Returns Boolean\n$deleted = $campaign_repository- delete($campaign- id);", 
            "title": "Repositories"
        }, 
        {
            "location": "/sharelov/flat-repositories/", 
            "text": "Flat Repositories\n\n\nFlat Repositories are located in \nApp\\Libreria\\RepositoriesFlat\n.\n\n\nFlat repositories class names end with the word \nFlat\n.\n\n\nUnlike regular \nrepositories\n (\n\ud83d\udcc4\n) which are associated to a \nmodel\n, \nflat repositories\n return an flat \narray\n. In that sense, \nflat repositories\n have more in common with \nConfiguration Files\n (\n\ud83d\udcc4\n) instead of \nrepositories\n. One thing they don't have in common though is the fact that \nflat repositories\n classes have specific methods that return the array in a specific way, either filtered, ordered by, reversing key values, etc.\n\n\nFlat repositories\n are, in that sense, like \nLaravel Colletions\n, but instead a \ncollections'\n generic methods, \nflat repositories\n have specific methods depending of the type of array.\n\n\nExample:\n\n\n// publication types instance\n$user_types = new \\App\\Libreria\\RepositoriesFlat\\PublicationsFlat();\n\n// generates array for a html select element\n$select_array = user_types-\nselect();", 
            "title": "Flat Repositories"
        }, 
        {
            "location": "/sharelov/flat-repositories/#flat-repositories", 
            "text": "Flat Repositories are located in  App\\Libreria\\RepositoriesFlat .  Flat repositories class names end with the word  Flat .  Unlike regular  repositories  ( \ud83d\udcc4 ) which are associated to a  model ,  flat repositories  return an flat  array . In that sense,  flat repositories  have more in common with  Configuration Files  ( \ud83d\udcc4 ) instead of  repositories . One thing they don't have in common though is the fact that  flat repositories  classes have specific methods that return the array in a specific way, either filtered, ordered by, reversing key values, etc.  Flat repositories  are, in that sense, like  Laravel Colletions , but instead a  collections'  generic methods,  flat repositories  have specific methods depending of the type of array.  Example:  // publication types instance\n$user_types = new \\App\\Libreria\\RepositoriesFlat\\PublicationsFlat();\n\n// generates array for a html select element\n$select_array = user_types- select();", 
            "title": "Flat Repositories"
        }, 
        {
            "location": "/sharelov/access-control/", 
            "text": "Access Control\n\n\nSharelov relies on \nPermissions\n and \nAuthentication\n to limit access to \nsections of the app\n and/or to \ndata coming from the database\n.\n\n\nPermissions\n\n\nPermissions are located in \nconfig\\permisos.php\n.\n\n\n\n\nNote\n\n\nPermissions' location may change in the future\n\n\n\n\n\n\nSee Also\n\n\n\n\nHelper\n: checkPermisos()\n\n\nClass\n: App\\Libreria\\User\\UserPermisosHelper\n\n\n\n\n\n\nPermissions\n have control over which \ntype of user\n (\n\ud83d\udcc4\n) can access specific sections (\nbrand.create\n) or perform specific \nactions\n (\nbrand.store\n) inside the app. Permissions are located in an array in the \nconfiguration folder\n (\n\ud83d\udcc4\n).\n\n\nThey can target, either specific or multiple \nactions\n or \nsections\n and associate it with one or multiple \nuser types\n.\n\n\nNaming\n\n\nThe key of the array functions is the name of the \npermission\n.\n\n\nPermissions\n are named using the \nRESTful\n convention. They can match the \nname of a route\n (\nbrands.campaigns\n) to target multiple \nactions\n of that route, but they can also match the route's name plus the \naction\n (\nbrands.campaigns.create\n) to target a specific action.\n\n\nWhen using a routes' name (\nbrands.campaigns\n) as a \npermission\n's name it's important to know that \nonly one level \naction\n will match\n. For example, \nbrands.campaigns.create\n and \nbrands.campaigns.update\n will match, but \nbrands.campaigns.uploads.destroy\n will not match. For that a \nbrands.campaigns.uploads\n must be used.\n\n\nOptions\n\n\n\n\ntipo\n \nstring\n: The type of \npermission\n. Types available: \ngrupo\n and \nniveles\n.\n\n\ngrupo\n \narray\n: If \ngrupo\n has been chosen as an option for \ntipo\n, a \ngrupo\n option must be added with a multi level array of \nactions\n and \nuser types\n.\n\n\nniveles\n \narray\n: If \nniveles\n has been chosen as an option for \ntipo\n, a \nniveles\n option must be added with an array of \nuser types\n.\n\n\nautorizacion\n \nboolean\n \ndeprecated\n: Indicates if permission also needs authorization.\n\n\n\n\nExamples\n\n\n\n\nHere the permission \nbrands.campaigns\n targets a group of \nactions\n.\n\n\n\n\n[\n    // permission name\n    // brands.campaigns permission\n    'brands.campaigns' =\n [\n        // options\n        'tipo' =\n 'grupo',\n        'grupo' =\n [\n            [\n                'acciones' =\n ['create', 'store', 'edit', 'update', 'destroy'],\n                'niveles' =\n ['community_manager','admin'],\n            ],\n        ],\n    ],\n]\n\n\n\n\nThis indicates: only the \ncommunity_manager\n and \nadmin\n types are able to access: \nbrands.campaigns.create\n, \nbrands.campaigns.store\n, \nbrands.campaigns.update\n and \nbrands.campaigns.destroy\n.\n\n\n\n\nHere the permission \nbrands.campaigns\n targets a group of \nuser types\n:\n\n\n\n\n[\n    // permission name\n    // brands uploads permissions\n    'brands.uploads' =\n [\n        // options\n        'tipo' =\n 'niveles',\n        'niveles' =\n ['community_manager','admin'],\n    ],\n]\n\n\n\n\nThis indicates: only the \ncommunity_manager\n and \nadmin\n types are able to access \nall of \nbrands.uploads\n actions\n.\n\n\n\n\n3: Here the permission \nbrands.campaigns.create\n targets a group of \nuser types\n:\n\n\n\n\n[\n    // permission name\n    // brands uploads.create permission\n    'brands.uploads.create' =\n [\n        // options\n        'tipo' =\n 'niveles',\n        'niveles' =\n ['community_manager','admin'],\n    ],\n]\n\n\n\n\nThis indicates: only the \ncommunity_manager\n and \nadmin\n types are able to access the \naction\n \nbrands.campaigns.create\n.\n\n\nAuthorization\n\n\n\n\nSee Also\n\n\n\n\nTrait\n: App\\Libreria\\Eloquent\\Scopes\\AuthorizedUsersTrait\n\n\nTrait\n: App\\Libreria\\Traits\\AuthoriseTrait\n\n\n\n\n\n\nAuthorizations\n have control over which models/database records a \nmembership\n (\n\ud83d\udcc4\n) has access to.\n\n\nWhen \nauthorizations\n are properly implemented only certain \nuser types\n would be able to access records from the restricted model directly. If \nmemberships\n from other \nuser types\n need to access those they must be \nauthorized\n.\n\n\nAuthorizations\n will be saved in the \nautorizaciones\n table and uses the \nAutorizacion\n model.\n\n\nImplementation\n\n\nImplementing \nauthorization\n in a model requires:\n\n\n\n\nCreate a special \npermission\n (\n\ud83d\udcc4\n) with an \naction\n named \nread\n, example: \nbrands.read\n. This \npermission\n should contain an array of \nuser types\n to which the \nauthorization\n won't apply.\n\n\n\n\n// permissions array\n[\n    // brands permission\n    'brands' =\n [\n        // options\n        'tipo' =\n 'grupo',\n        'grupo' =\n [\n            [\n                'acciones' =\n ['read'],\n                'niveles' =\n ['community_manager','admin'],\n            ],\n        ],\n    ],\n]\n\n\n\n\n\n\nInclude and use the \nApp\\Libreria\\Eloquent\\Scopes\\AuthorizedUsersTrait\n trait in the model.\n\n\nAdd both a constant and a protected property \npermission\n to the class with the value of the \nread\n permission name created before.\n\n\nThe model's \nboot\n method needs to be overwritten and the static \napplyAuthorizationScope()\n method needs to be called passing the \nread\n permission.\n\n\n\n\nHere's a complete example:\n\n\nnamespace App\\Models;\n\n// base model\nuse App\\Models\\ModelBase;\n// authorization trait\nuse App\\Libreria\\Eloquent\\Scopes\\AuthorizedUsersTrait;\n\n/*\n * Brand model\n */\nclass Brand extends ModelBase\n{\n    // include authorization trait\n    use AuthorizedUsersTrait;\n\n    // both constant and protected\n    const PERMISSION = 'brands.read';\n    protected $permission = self::PEMISO;\n\n    /**\n     * The \nbooting\n method of the model.\n     *\n     * @return void\n     */\n    protected static function boot()\n    {\n        // parent\n        parent::boot();\n\n        // apply authorization global scope\n        self::applyAuthorizationScope(self::PERMISSION);\n\n    }\n}\n\n\n\n\nAuthorize Teammates (\nmemberships\n)\n\n\nThe \nAutorizacion Repository\n is used to authorize \nmemberships\n. Also, the \nApp\\Libreria\\Traits\\AuthoriseTrait\n (\n\ud83d\udcc4\n) can assist \nmemberships\n authorizations, usually done in a \ncontroller\n.", 
            "title": "Access Control"
        }, 
        {
            "location": "/sharelov/access-control/#access-control", 
            "text": "Sharelov relies on  Permissions  and  Authentication  to limit access to  sections of the app  and/or to  data coming from the database .", 
            "title": "Access Control"
        }, 
        {
            "location": "/sharelov/access-control/#permissions", 
            "text": "Permissions are located in  config\\permisos.php .   Note  Permissions' location may change in the future    See Also   Helper : checkPermisos()  Class : App\\Libreria\\User\\UserPermisosHelper    Permissions  have control over which  type of user  ( \ud83d\udcc4 ) can access specific sections ( brand.create ) or perform specific  actions  ( brand.store ) inside the app. Permissions are located in an array in the  configuration folder  ( \ud83d\udcc4 ).  They can target, either specific or multiple  actions  or  sections  and associate it with one or multiple  user types .", 
            "title": "Permissions"
        }, 
        {
            "location": "/sharelov/access-control/#naming", 
            "text": "The key of the array functions is the name of the  permission .  Permissions  are named using the  RESTful  convention. They can match the  name of a route  ( brands.campaigns ) to target multiple  actions  of that route, but they can also match the route's name plus the  action  ( brands.campaigns.create ) to target a specific action.  When using a routes' name ( brands.campaigns ) as a  permission 's name it's important to know that  only one level  action  will match . For example,  brands.campaigns.create  and  brands.campaigns.update  will match, but  brands.campaigns.uploads.destroy  will not match. For that a  brands.campaigns.uploads  must be used.", 
            "title": "Naming"
        }, 
        {
            "location": "/sharelov/access-control/#options", 
            "text": "tipo   string : The type of  permission . Types available:  grupo  and  niveles .  grupo   array : If  grupo  has been chosen as an option for  tipo , a  grupo  option must be added with a multi level array of  actions  and  user types .  niveles   array : If  niveles  has been chosen as an option for  tipo , a  niveles  option must be added with an array of  user types .  autorizacion   boolean   deprecated : Indicates if permission also needs authorization.", 
            "title": "Options"
        }, 
        {
            "location": "/sharelov/access-control/#examples", 
            "text": "Here the permission  brands.campaigns  targets a group of  actions .   [\n    // permission name\n    // brands.campaigns permission\n    'brands.campaigns' =  [\n        // options\n        'tipo' =  'grupo',\n        'grupo' =  [\n            [\n                'acciones' =  ['create', 'store', 'edit', 'update', 'destroy'],\n                'niveles' =  ['community_manager','admin'],\n            ],\n        ],\n    ],\n]  This indicates: only the  community_manager  and  admin  types are able to access:  brands.campaigns.create ,  brands.campaigns.store ,  brands.campaigns.update  and  brands.campaigns.destroy .   Here the permission  brands.campaigns  targets a group of  user types :   [\n    // permission name\n    // brands uploads permissions\n    'brands.uploads' =  [\n        // options\n        'tipo' =  'niveles',\n        'niveles' =  ['community_manager','admin'],\n    ],\n]  This indicates: only the  community_manager  and  admin  types are able to access  all of  brands.uploads  actions .   3: Here the permission  brands.campaigns.create  targets a group of  user types :   [\n    // permission name\n    // brands uploads.create permission\n    'brands.uploads.create' =  [\n        // options\n        'tipo' =  'niveles',\n        'niveles' =  ['community_manager','admin'],\n    ],\n]  This indicates: only the  community_manager  and  admin  types are able to access the  action   brands.campaigns.create .", 
            "title": "Examples"
        }, 
        {
            "location": "/sharelov/access-control/#authorization", 
            "text": "See Also   Trait : App\\Libreria\\Eloquent\\Scopes\\AuthorizedUsersTrait  Trait : App\\Libreria\\Traits\\AuthoriseTrait    Authorizations  have control over which models/database records a  membership  ( \ud83d\udcc4 ) has access to.  When  authorizations  are properly implemented only certain  user types  would be able to access records from the restricted model directly. If  memberships  from other  user types  need to access those they must be  authorized .  Authorizations  will be saved in the  autorizaciones  table and uses the  Autorizacion  model.", 
            "title": "Authorization"
        }, 
        {
            "location": "/sharelov/access-control/#implementation", 
            "text": "Implementing  authorization  in a model requires:   Create a special  permission  ( \ud83d\udcc4 ) with an  action  named  read , example:  brands.read . This  permission  should contain an array of  user types  to which the  authorization  won't apply.   // permissions array\n[\n    // brands permission\n    'brands' =  [\n        // options\n        'tipo' =  'grupo',\n        'grupo' =  [\n            [\n                'acciones' =  ['read'],\n                'niveles' =  ['community_manager','admin'],\n            ],\n        ],\n    ],\n]   Include and use the  App\\Libreria\\Eloquent\\Scopes\\AuthorizedUsersTrait  trait in the model.  Add both a constant and a protected property  permission  to the class with the value of the  read  permission name created before.  The model's  boot  method needs to be overwritten and the static  applyAuthorizationScope()  method needs to be called passing the  read  permission.   Here's a complete example:  namespace App\\Models;\n\n// base model\nuse App\\Models\\ModelBase;\n// authorization trait\nuse App\\Libreria\\Eloquent\\Scopes\\AuthorizedUsersTrait;\n\n/*\n * Brand model\n */\nclass Brand extends ModelBase\n{\n    // include authorization trait\n    use AuthorizedUsersTrait;\n\n    // both constant and protected\n    const PERMISSION = 'brands.read';\n    protected $permission = self::PEMISO;\n\n    /**\n     * The  booting  method of the model.\n     *\n     * @return void\n     */\n    protected static function boot()\n    {\n        // parent\n        parent::boot();\n\n        // apply authorization global scope\n        self::applyAuthorizationScope(self::PERMISSION);\n\n    }\n}", 
            "title": "Implementation"
        }, 
        {
            "location": "/sharelov/access-control/#authorize-teammates-memberships", 
            "text": "The  Autorizacion Repository  is used to authorize  memberships . Also, the  App\\Libreria\\Traits\\AuthoriseTrait  ( \ud83d\udcc4 ) can assist  memberships  authorizations, usually done in a  controller .", 
            "title": "Authorize Teammates (memberships)"
        }, 
        {
            "location": "/sharelov/packages/list/", 
            "text": "Packages\n\n\n\n\nAssets", 
            "title": "Packages List"
        }, 
        {
            "location": "/sharelov/packages/list/#packages", 
            "text": "Assets", 
            "title": "Packages"
        }, 
        {
            "location": "/sharelov/packages/assets/", 
            "text": "Assets\n\n\n\n\nNote\n\n\nSome refactoring need\n\n\n\n\nClasses that deal with the uploaded assets.\n\n\nUploads\n\n\n\n\nSee Also\n\n\n\n\nFacade\n: UtilUploads\n\n\nTrait\n: App\\Libreria\\Traits\\UploadsTrait\n\n\n\n\n\n\nnamespace: \nApp\\Libreria\\Assets\\Uploads\n\n\nA class with helpers methods to deal with uploads. Supports uploading files by passing a \nModel\n as a parameter.\n\n\nUpload\n\n\nUploads a file by type and inserts it to the database\n\n\nParams\n:\n\n\n\n\n$field\n \nstring\n: The name of the file input field.\n\n\n$type\n \nstring\n: File's \nModel Type\n. \nAbout Content Types\n.\n\n\n$relation_id\n \ninteger\n \noptional\n: Id from the model that the image belongs.\n\n\n$options\n \narray\n \noptional\n: Array options.\n\n\nmax_size\n: \ninteger\n: Upload Max Size.\n\n\npath\n \nstring\n: Optional image path if different from \nModel Type\n's path.\n\n\nadditional_info\n \narray\n: Additional info you want to send to the \nRepository\n when the create is executed.\n\n\n\n\n\n\n\n\nReturn\n:\n\n\nApp\\Models\\Archivo\n - It Return an \nArchivo\n's instance of the uploaded file.\n\n\nExample\n:\n\n\n// import class\nuse \\App\\Libreria\\Assets\\Uploads;\n// create instance\n$upload_instance = new Uploads;\n// upload\n$archivo_model = $upload_instance-\nUpload('upload', 'brands', 14);\n\n\n\n\ngetTypePath\n\n\nGets a path from a \nModel Type\n.\n\n\nParams\n:\n\n\n\n\n$type\n \nstring\n: File's \nModel Type\n. \nAbout Content Types\n.\n\n\n\n\nReturn\n:\n\n\nstring\n - Return the path where a file should be uploaded from a \nModel Type\n\n\nExample\n:\n\n\n// import class\nuse \\App\\Libreria\\Assets\\Uploads;\n// create instance\n$upload_instance = new Uploads;\n// upload path\n$path = $upload_instance-\ngetTypePath('brands');\n\n\n\n\nFileSystem\n\n\n\n\nSee Also\n\n\n\n\nFacade\n: UtilFilesystem\n\n\n\n\n\n\nnamespace: \nApp\\Libreria\\Assets\\FileSystem\n\n\nA class with helper methods to deal with Laravel's FileSystem. It's mostly used by the \nThumbnail\n class.\n\n\ngetFile\n\n\nGets a image string from an image path.\n\n\nParams\n:\n\n\n\n\n$path\n \nstring\n: File path.\n\n\n$disk\n \nstring\n \noptional\n: FileSystem disk (default is 'uploads')\n\n\n\n\nReturn\n:\n\n\nstring\n - Return a image string.\n\n\nExample\n:\n\n\n// import class\nuse \\App\\Libreria\\Assets\\FileSystem;\n// create instance\n$filesystem_instance = new FileSystem;\n// image\n$image_string = $filesystem_instance-\ngetFile('archivo/posts/123.jpg');\n\n\n\n\ngetFileFromModel\n\n\nGets a image string from an \nArchivo\n elequent model.\n\n\nParams\n:\n\n\n\n\n$model\n \nApp\\Models\\Archivo\n: An \nArchivo\n elequent model instance.\n\n\n$disk\n \nstring\n \noptional\n: FileSystem disk (default is 'uploads')\n\n\n\n\nReturn\n:\n\n\nstring\n - Return a image string.\n\n\nExample\n:\n\n\n// import class\nuse \\App\\Libreria\\Assets\\FileSystem;\n// create instance\n$filesystem_instance = new FileSystem;\n// model\n$model = Archivo::find(1);\n// image\n$image_string = $filesystem_instance-\ngetFileFromModel($model);\n\n\n\n\nmoveTempFileFromModel\n\n\nMoves \ntemp\n type files to another type.\n\n\nParams\n:\n\n\n\n\n$model\n \nApp\\Models\\Archivo\n: An \nArchivo\n elequent model instance with a \ntemp\n type.\n\n\n$type\n \nstring\n: The new \nModel Type\n. \nAbout Content Types\n.\n\n\n$relation_id\n \ninteger\n: Id from the model that the image belongs.\n\n\ndelete_old\n \nboolean\n: Delete temp file. The default is true.\n\n\nsave\n \nboolean\n: Saves to database instead of returning the laravel object. The default is true.\n\n\n\n\nReturn\n:\n\n\nApp\\Models\\Archivo\n - It Return an \nArchivo\n's instance of the uploaded file.\n\n\nExample\n:\n\n\n// import class\nuse \\App\\Libreria\\Assets\\FileSystem;\n// create instance\n$filesystem_instance = new FileSystem;\n// model\n$model = Archivo::find(1);\n// image\n$image_string = $filesystem_instance-\nmoveTempFileFromModel($model, 'tweets', 134);\n\n\n\n\nmoveTempFileFromId\n\n\nMoves \ntemp\n type files to another type.\n\n\nParams\n:\n\n\n\n\n$model_id\n \ninteger\n: Id from the the \ntemp\n type model.\n\n\n$type\n \nstring\n: The new \nModel Type\n. \nAbout Content Types\n.\n\n\n$relation_id\n \ninteger\n: Id from the model that the image belongs.\n\n\ndelete_old\n \nboolean\n: Delete temp file. The default is true.\n\n\nsave\n \nboolean\n: Saves to database instead of returning the laravel object. The default is true.\n\n\n\n\nReturn\n:\n\n\nApp\\Models\\Archivo\n - It Return an \nArchivo\n's instance of the uploaded file.\n\n\nExample\n:\n\n\n// import class\nuse \\App\\Libreria\\Assets\\FileSystem;\n// create instance\n$filesystem_instance = new FileSystem;\n// image\n$image_string = $filesystem_instance-\nmoveTempFileFromId(143, 'tweets', 134);\n\n\n\n\ncopyFileByPath\n\n\nCopies an existing file to a new location on the disk.\n\n\nParams\n:\n\n\n\n\n$old_file_path\n \nstring\n: Old file path.\n\n\n$new_file_path\n \nstring\n: New file path.\n\n\n\n\nReturn\n:\n\n\nvoid\n\n\nExample\n:\n\n\n// import class\nuse \\App\\Libreria\\Assets\\AssetUrls;\n// create instance\n$assets_helper = new AssetUrls();\n// use\n$avatar_public_url = $assets_helper-\ncopyFileByPath('archivos/posts/111.jpg', 'archivos/tweets/222.jpg');\n\n\n\n\ndownloadByModel\n\n\nForce download file when a model is provided.\n\n\nParams\n:\n\n\n\n\n$model\n \nApp\\Models\\Archivo\n: An \nArchivo\n elequent model instance.\n\n\n\n\nReturn\n:\n\n\nboolean\n\n\nExample\n:\n\n\n// import class\nuse \\App\\Libreria\\Assets\\AssetUrls;\n// create instance\n$assets_helper = new AssetUrls();\n// model\n$model = Archivo::find(1);\n// use\n$assets_helper-\ndownloadByModel(model);\n\n\n\n\ngetFilePathFromModel\n\n\nReturns file full path from model.\n\n\nParams\n:\n\n\n\n\n$model\n \nApp\\Models\\Archivo\n: An \nArchivo\n elequent model instance.\n\n\n\n\nReturn\n:\n\n\nstring\n - File path.\n\n\nExample\n:\n\n\n// import class\nuse \\App\\Libreria\\Assets\\AssetUrls;\n// create instance\n$assets_helper = new AssetUrls();\n// model\n$model = Archivo::find(1);\n// use\n$file_path = $assets_helper-\ngetFilePathFromModel($model);\n\n\n\n\nAssetsUrl\n\n\n\n\nSee Also\n\n\n\n\nFacade\n: UtilAssetsUrl\n\n\n\n\n\n\nnamespace: \nApp\\Libreria\\Assets\\AssetsUrl\n\n\nHelps creating resized (thumbnails) uploaded images urls. A shortcut to \ngetThumbnailUrlByModel\n using the option: \n['avatar' =\n true];\n\n\ngetAvatar\n\n\nGets the public user profile image that can be accessed outside sharelov (no login needed).\n\n\nParams\n:\n\n\n\n\n$model\n \nApp\\Models\\Archivo\n: an \nArchivo\n elequent model.\n\n\n$params\n \narray\n \noptional\n: An array with the thumbnail parameters:\n\n\n\n\n$params = [\n    // max width\n    'w' =\n 100,\n    // max height\n    'h' =\n 100,\n    // crop\n    'c' =\n true,\n    // quality\n    'q' =\n 90,\n];\n\n\n\n\nReturn\n:\n\n\nstring\n - Return an image url.\n\n\nExample\n:\n\n\n// import class\nuse \\App\\Libreria\\Assets\\AssetUrls;\n// create instance\n$assets_helper = new AssetUrls();\n// image params\n$params = ['w' =\n 100,'h' =\n 100];\n// model\n$model = Archivo::find(1);\n// use\n$avatar_public_url = $assets_helper-\ngetAvatar(model, params);\n\n\n\n\ngetThumbnailUrl\n\n\nGets a thumbnail url from an image path.\n\n\nParams\n:\n\n\n\n\n$image_name\n \nstring\n: Image name.\n\n\n$image_path\n \nstring\n \noptional\n: Image path \narchivos/brands/\n\n\n$params\n \narray\n \noptional\n: An array with the thumbnail parameters:\n\n\n\n\n$params = [\n    // max width\n    'w' =\n 100,\n    // max height\n    'h' =\n 100,\n    // crop\n    'c' =\n true,\n    // quality\n    'q' =\n 90,\n];\n\n\n\n\n\n\n$options\n \narray\n \noptional\n: An array with the thumbnail options:\n\n\n\n\n// one of the following routes options\n$options = [\n    // can be accessed outside sharelov (no login needed), with a hashed key\n    'protected' =\n true,\n    // can be accessed outside sharelov (no login needed).\n    'public' =\n true,\n    // user profile image that can be accessed outside sharelov (no login needed)\n    'avatar' =\n true,\n];\n\n\n\n\nReturn\n:\n\n\nstring\n - Return an image url.\n\n\nExample\n:\n\n\n// import class\nuse \\App\\Libreria\\Assets\\AssetUrls;\n// create instance\n$assets_helper = new AssetUrls();\n// image name\n$image_name = '1472581969-HlxnGH88Nb.jpg';\n// image path\n$image_path = 'archivos/brands/';\n// image params\n$params = ['w' =\n 100,'h' =\n 100];\n// use\n$avatar_public_url = $assets_helper-\ngetThumbnailUrl($image_name, $image_path, $params);\n\n\n\n\nPlaceHolder\n\n\nCreate placeholder images (images with arbitrary)", 
            "title": "Assets"
        }, 
        {
            "location": "/sharelov/packages/assets/#assets", 
            "text": "Note  Some refactoring need   Classes that deal with the uploaded assets.", 
            "title": "Assets"
        }, 
        {
            "location": "/sharelov/packages/assets/#uploads", 
            "text": "See Also   Facade : UtilUploads  Trait : App\\Libreria\\Traits\\UploadsTrait    namespace:  App\\Libreria\\Assets\\Uploads  A class with helpers methods to deal with uploads. Supports uploading files by passing a  Model  as a parameter.", 
            "title": "Uploads"
        }, 
        {
            "location": "/sharelov/packages/assets/#upload", 
            "text": "Uploads a file by type and inserts it to the database  Params :   $field   string : The name of the file input field.  $type   string : File's  Model Type .  About Content Types .  $relation_id   integer   optional : Id from the model that the image belongs.  $options   array   optional : Array options.  max_size :  integer : Upload Max Size.  path   string : Optional image path if different from  Model Type 's path.  additional_info   array : Additional info you want to send to the  Repository  when the create is executed.     Return :  App\\Models\\Archivo  - It Return an  Archivo 's instance of the uploaded file.  Example :  // import class\nuse \\App\\Libreria\\Assets\\Uploads;\n// create instance\n$upload_instance = new Uploads;\n// upload\n$archivo_model = $upload_instance- Upload('upload', 'brands', 14);", 
            "title": "Upload"
        }, 
        {
            "location": "/sharelov/packages/assets/#gettypepath", 
            "text": "Gets a path from a  Model Type .  Params :   $type   string : File's  Model Type .  About Content Types .   Return :  string  - Return the path where a file should be uploaded from a  Model Type  Example :  // import class\nuse \\App\\Libreria\\Assets\\Uploads;\n// create instance\n$upload_instance = new Uploads;\n// upload path\n$path = $upload_instance- getTypePath('brands');", 
            "title": "getTypePath"
        }, 
        {
            "location": "/sharelov/packages/assets/#filesystem", 
            "text": "See Also   Facade : UtilFilesystem    namespace:  App\\Libreria\\Assets\\FileSystem  A class with helper methods to deal with Laravel's FileSystem. It's mostly used by the  Thumbnail  class.", 
            "title": "FileSystem"
        }, 
        {
            "location": "/sharelov/packages/assets/#getfile", 
            "text": "Gets a image string from an image path.  Params :   $path   string : File path.  $disk   string   optional : FileSystem disk (default is 'uploads')   Return :  string  - Return a image string.  Example :  // import class\nuse \\App\\Libreria\\Assets\\FileSystem;\n// create instance\n$filesystem_instance = new FileSystem;\n// image\n$image_string = $filesystem_instance- getFile('archivo/posts/123.jpg');", 
            "title": "getFile"
        }, 
        {
            "location": "/sharelov/packages/assets/#getfilefrommodel", 
            "text": "Gets a image string from an  Archivo  elequent model.  Params :   $model   App\\Models\\Archivo : An  Archivo  elequent model instance.  $disk   string   optional : FileSystem disk (default is 'uploads')   Return :  string  - Return a image string.  Example :  // import class\nuse \\App\\Libreria\\Assets\\FileSystem;\n// create instance\n$filesystem_instance = new FileSystem;\n// model\n$model = Archivo::find(1);\n// image\n$image_string = $filesystem_instance- getFileFromModel($model);", 
            "title": "getFileFromModel"
        }, 
        {
            "location": "/sharelov/packages/assets/#movetempfilefrommodel", 
            "text": "Moves  temp  type files to another type.  Params :   $model   App\\Models\\Archivo : An  Archivo  elequent model instance with a  temp  type.  $type   string : The new  Model Type .  About Content Types .  $relation_id   integer : Id from the model that the image belongs.  delete_old   boolean : Delete temp file. The default is true.  save   boolean : Saves to database instead of returning the laravel object. The default is true.   Return :  App\\Models\\Archivo  - It Return an  Archivo 's instance of the uploaded file.  Example :  // import class\nuse \\App\\Libreria\\Assets\\FileSystem;\n// create instance\n$filesystem_instance = new FileSystem;\n// model\n$model = Archivo::find(1);\n// image\n$image_string = $filesystem_instance- moveTempFileFromModel($model, 'tweets', 134);", 
            "title": "moveTempFileFromModel"
        }, 
        {
            "location": "/sharelov/packages/assets/#movetempfilefromid", 
            "text": "Moves  temp  type files to another type.  Params :   $model_id   integer : Id from the the  temp  type model.  $type   string : The new  Model Type .  About Content Types .  $relation_id   integer : Id from the model that the image belongs.  delete_old   boolean : Delete temp file. The default is true.  save   boolean : Saves to database instead of returning the laravel object. The default is true.   Return :  App\\Models\\Archivo  - It Return an  Archivo 's instance of the uploaded file.  Example :  // import class\nuse \\App\\Libreria\\Assets\\FileSystem;\n// create instance\n$filesystem_instance = new FileSystem;\n// image\n$image_string = $filesystem_instance- moveTempFileFromId(143, 'tweets', 134);", 
            "title": "moveTempFileFromId"
        }, 
        {
            "location": "/sharelov/packages/assets/#copyfilebypath", 
            "text": "Copies an existing file to a new location on the disk.  Params :   $old_file_path   string : Old file path.  $new_file_path   string : New file path.   Return :  void  Example :  // import class\nuse \\App\\Libreria\\Assets\\AssetUrls;\n// create instance\n$assets_helper = new AssetUrls();\n// use\n$avatar_public_url = $assets_helper- copyFileByPath('archivos/posts/111.jpg', 'archivos/tweets/222.jpg');", 
            "title": "copyFileByPath"
        }, 
        {
            "location": "/sharelov/packages/assets/#downloadbymodel", 
            "text": "Force download file when a model is provided.  Params :   $model   App\\Models\\Archivo : An  Archivo  elequent model instance.   Return :  boolean  Example :  // import class\nuse \\App\\Libreria\\Assets\\AssetUrls;\n// create instance\n$assets_helper = new AssetUrls();\n// model\n$model = Archivo::find(1);\n// use\n$assets_helper- downloadByModel(model);", 
            "title": "downloadByModel"
        }, 
        {
            "location": "/sharelov/packages/assets/#getfilepathfrommodel", 
            "text": "Returns file full path from model.  Params :   $model   App\\Models\\Archivo : An  Archivo  elequent model instance.   Return :  string  - File path.  Example :  // import class\nuse \\App\\Libreria\\Assets\\AssetUrls;\n// create instance\n$assets_helper = new AssetUrls();\n// model\n$model = Archivo::find(1);\n// use\n$file_path = $assets_helper- getFilePathFromModel($model);", 
            "title": "getFilePathFromModel"
        }, 
        {
            "location": "/sharelov/packages/assets/#assetsurl", 
            "text": "See Also   Facade : UtilAssetsUrl    namespace:  App\\Libreria\\Assets\\AssetsUrl  Helps creating resized (thumbnails) uploaded images urls. A shortcut to  getThumbnailUrlByModel  using the option:  ['avatar' =  true];", 
            "title": "AssetsUrl"
        }, 
        {
            "location": "/sharelov/packages/assets/#getavatar", 
            "text": "Gets the public user profile image that can be accessed outside sharelov (no login needed).  Params :   $model   App\\Models\\Archivo : an  Archivo  elequent model.  $params   array   optional : An array with the thumbnail parameters:   $params = [\n    // max width\n    'w' =  100,\n    // max height\n    'h' =  100,\n    // crop\n    'c' =  true,\n    // quality\n    'q' =  90,\n];  Return :  string  - Return an image url.  Example :  // import class\nuse \\App\\Libreria\\Assets\\AssetUrls;\n// create instance\n$assets_helper = new AssetUrls();\n// image params\n$params = ['w' =  100,'h' =  100];\n// model\n$model = Archivo::find(1);\n// use\n$avatar_public_url = $assets_helper- getAvatar(model, params);", 
            "title": "getAvatar"
        }, 
        {
            "location": "/sharelov/packages/assets/#getthumbnailurl", 
            "text": "Gets a thumbnail url from an image path.  Params :   $image_name   string : Image name.  $image_path   string   optional : Image path  archivos/brands/  $params   array   optional : An array with the thumbnail parameters:   $params = [\n    // max width\n    'w' =  100,\n    // max height\n    'h' =  100,\n    // crop\n    'c' =  true,\n    // quality\n    'q' =  90,\n];   $options   array   optional : An array with the thumbnail options:   // one of the following routes options\n$options = [\n    // can be accessed outside sharelov (no login needed), with a hashed key\n    'protected' =  true,\n    // can be accessed outside sharelov (no login needed).\n    'public' =  true,\n    // user profile image that can be accessed outside sharelov (no login needed)\n    'avatar' =  true,\n];  Return :  string  - Return an image url.  Example :  // import class\nuse \\App\\Libreria\\Assets\\AssetUrls;\n// create instance\n$assets_helper = new AssetUrls();\n// image name\n$image_name = '1472581969-HlxnGH88Nb.jpg';\n// image path\n$image_path = 'archivos/brands/';\n// image params\n$params = ['w' =  100,'h' =  100];\n// use\n$avatar_public_url = $assets_helper- getThumbnailUrl($image_name, $image_path, $params);", 
            "title": "getThumbnailUrl"
        }, 
        {
            "location": "/sharelov/packages/assets/#placeholder", 
            "text": "Create placeholder images (images with arbitrary)", 
            "title": "PlaceHolder"
        }, 
        {
            "location": "/sharelov/traits/list/", 
            "text": "Traits\n\n\n\n\nAuthoriseTrait", 
            "title": "Traits List"
        }, 
        {
            "location": "/sharelov/traits/list/#traits", 
            "text": "AuthoriseTrait", 
            "title": "Traits"
        }, 
        {
            "location": "/sharelov/traits/authorise-trait/", 
            "text": "AuthoriseTrait", 
            "title": "AuthoriseTrait"
        }, 
        {
            "location": "/sharelov/traits/authorise-trait/#authorisetrait", 
            "text": "", 
            "title": "AuthoriseTrait"
        }, 
        {
            "location": "/sharelov/helpers/list/", 
            "text": "Helpers", 
            "title": "Helpers List"
        }, 
        {
            "location": "/sharelov/helpers/list/#helpers", 
            "text": "", 
            "title": "Helpers"
        }, 
        {
            "location": "/javascript/progressive-enhancement/", 
            "text": "Progressive Enhancement", 
            "title": "Progressive Enhancement"
        }, 
        {
            "location": "/javascript/progressive-enhancement/#progressive-enhancement", 
            "text": "", 
            "title": "Progressive Enhancement"
        }
    ]
}